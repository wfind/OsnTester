//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace OsnTester.OsnProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapAuth", Namespace="http://schemas.datacontract.org/2004/07/OSNSPlatformService.DataType")]
    public enum MapAuth : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MA_READ_ONLY = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MA_READ_WRITE = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNStatus", Namespace="http://schemas.datacontract.org/2004/07/OSNSPlatformService.DataType")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.OSNStatusEx))]
    public partial class OSNStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RetCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Information {
            get {
                return this.InformationField;
            }
            set {
                if ((object.ReferenceEquals(this.InformationField, value) != true)) {
                    this.InformationField = value;
                    this.RaisePropertyChanged("Information");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RetCode {
            get {
                return this.RetCodeField;
            }
            set {
                if ((this.RetCodeField.Equals(value) != true)) {
                    this.RetCodeField = value;
                    this.RaisePropertyChanged("RetCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNStatusEx", Namespace="http://schemas.datacontract.org/2004/07/OSNSPlatformService.DataType")]
    [System.SerializableAttribute()]
    public partial class OSNStatusEx : OsnTester.OsnProxy.OSNStatus {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageVolumeBasis", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.StorageVolume))]
    public partial class StorageVolumeBasis : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.VolumeMarker MarkerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PoolIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.VolumeProfile ProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VolumeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VolumeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong VolumeSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageState VolumeStateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.VolumeMarker Marker {
            get {
                return this.MarkerField;
            }
            set {
                if ((this.MarkerField.Equals(value) != true)) {
                    this.MarkerField = value;
                    this.RaisePropertyChanged("Marker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PoolId {
            get {
                return this.PoolIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PoolIdField, value) != true)) {
                    this.PoolIdField = value;
                    this.RaisePropertyChanged("PoolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.VolumeProfile Profile {
            get {
                return this.ProfileField;
            }
            set {
                if ((this.ProfileField.Equals(value) != true)) {
                    this.ProfileField = value;
                    this.RaisePropertyChanged("Profile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeId {
            get {
                return this.VolumeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeIdField, value) != true)) {
                    this.VolumeIdField = value;
                    this.RaisePropertyChanged("VolumeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeName {
            get {
                return this.VolumeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeNameField, value) != true)) {
                    this.VolumeNameField = value;
                    this.RaisePropertyChanged("VolumeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong VolumeSize {
            get {
                return this.VolumeSizeField;
            }
            set {
                if ((this.VolumeSizeField.Equals(value) != true)) {
                    this.VolumeSizeField = value;
                    this.RaisePropertyChanged("VolumeSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageState VolumeState {
            get {
                return this.VolumeStateField;
            }
            set {
                if ((this.VolumeStateField.Equals(value) != true)) {
                    this.VolumeStateField = value;
                    this.RaisePropertyChanged("VolumeState");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageVolume", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class StorageVolume : OsnTester.OsnProxy.StorageVolumeBasis {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeMarker", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum VolumeMarker : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_INTERNAL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_LOOPBACK = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_TMAPPING = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_MULTIPORT = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_PASSTHROUGH = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_CDP_SOURCE = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_CDP_BUFFER = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_SNAPSHOT_META = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_SNAPSHOT_SOURCE = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_SNAPSHOT_TARGET = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_LUNMIRROR_SOURCE_SYNC = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_LUNMIRROR_BUFFER = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_LUNMIRROR_TARGET = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_BACKUP_SOURCE = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_BACKUP_BUFFER = 16384,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_BACKUP_TARGET = 32768,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_MIRROR_SOURCE = 65536,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_MIRROR_TARGET = 131072,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARK_LUNMIRROR_SOURCE_ASYNC = 262144,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeProfile", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum VolumeProfile : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFILE_NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFILE_NORMAL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFILE_HIGH = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFILE_SLOW = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFILE_HIGH_NOASM = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFILE_NORMAL_NOASM = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROFILE_SLOW_NOASM = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageState", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum StorageState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_ONLINE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_MISSDISK = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_NOREADY = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_OFFLINE = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_UNKNOWN = 4096,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChannelPair", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class ChannelPair : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DefaultFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.InitiatorChannel IChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.TargetChannel TChannelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DefaultFlag {
            get {
                return this.DefaultFlagField;
            }
            set {
                if ((this.DefaultFlagField.Equals(value) != true)) {
                    this.DefaultFlagField = value;
                    this.RaisePropertyChanged("DefaultFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.InitiatorChannel IChannel {
            get {
                return this.IChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.IChannelField, value) != true)) {
                    this.IChannelField = value;
                    this.RaisePropertyChanged("IChannel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.TargetChannel TChannel {
            get {
                return this.TChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.TChannelField, value) != true)) {
                    this.TChannelField = value;
                    this.RaisePropertyChanged("TChannel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InitiatorChannel", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class InitiatorChannel : OsnTester.OsnProxy.ChannelBasis {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PortIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ScsiModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PortState StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIdField, value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PortId {
            get {
                return this.PortIdField;
            }
            set {
                if ((this.PortIdField.Equals(value) != true)) {
                    this.PortIdField = value;
                    this.RaisePropertyChanged("PortId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ScsiMode {
            get {
                return this.ScsiModeField;
            }
            set {
                if ((this.ScsiModeField.Equals(value) != true)) {
                    this.ScsiModeField = value;
                    this.RaisePropertyChanged("ScsiMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PortState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TargetChannel", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class TargetChannel : OsnTester.OsnProxy.ChannelBasis {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PortIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort PortIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ScsiModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PortState StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PortId {
            get {
                return this.PortIdField;
            }
            set {
                if ((this.PortIdField.Equals(value) != true)) {
                    this.PortIdField = value;
                    this.RaisePropertyChanged("PortId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort PortIndex {
            get {
                return this.PortIndexField;
            }
            set {
                if ((this.PortIndexField.Equals(value) != true)) {
                    this.PortIndexField = value;
                    this.RaisePropertyChanged("PortIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ScsiMode {
            get {
                return this.ScsiModeField;
            }
            set {
                if ((this.ScsiModeField.Equals(value) != true)) {
                    this.ScsiModeField = value;
                    this.RaisePropertyChanged("ScsiMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerId {
            get {
                return this.ServerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIdField, value) != true)) {
                    this.ServerIdField = value;
                    this.RaisePropertyChanged("ServerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PortState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChannelBasis", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.TargetChannel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.InitiatorChannel))]
    public partial class ChannelBasis : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PortType CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IQNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PortMode RunModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WWNField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PortType Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IQN {
            get {
                return this.IQNField;
            }
            set {
                if ((object.ReferenceEquals(this.IQNField, value) != true)) {
                    this.IQNField = value;
                    this.RaisePropertyChanged("IQN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PortMode RunModel {
            get {
                return this.RunModelField;
            }
            set {
                if ((this.RunModelField.Equals(value) != true)) {
                    this.RunModelField = value;
                    this.RaisePropertyChanged("RunModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WWN {
            get {
                return this.WWNField;
            }
            set {
                if ((object.ReferenceEquals(this.WWNField, value) != true)) {
                    this.WWNField = value;
                    this.RaisePropertyChanged("WWN");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortType", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum PortType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PORT_ISCSI = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PORT_FC = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PORT_UNKNOWN = 100,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortMode", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum PortMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MODE_INITIATOR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MODE_TARGET = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortState", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum PortState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_OFFLINE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_LOGIN = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_ONLINE = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_UNKNOWN = 4096,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InternalMapping", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class InternalMapping : OsnTester.OsnProxy.MappingEntry {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IChannelAliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PortState LinkStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TChannelAliasField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IChannelAlias {
            get {
                return this.IChannelAliasField;
            }
            set {
                if ((object.ReferenceEquals(this.IChannelAliasField, value) != true)) {
                    this.IChannelAliasField = value;
                    this.RaisePropertyChanged("IChannelAlias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PortState LinkState {
            get {
                return this.LinkStateField;
            }
            set {
                if ((this.LinkStateField.Equals(value) != true)) {
                    this.LinkStateField = value;
                    this.RaisePropertyChanged("LinkState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TChannelAlias {
            get {
                return this.TChannelAliasField;
            }
            set {
                if ((object.ReferenceEquals(this.TChannelAliasField, value) != true)) {
                    this.TChannelAliasField = value;
                    this.RaisePropertyChanged("TChannelAlias");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MappingEntry", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.StorageMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.InternalMapping))]
    public partial class MappingEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.MapFlag AccessFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.MapKind CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IChannelWWNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort LunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MappingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TChannelWWNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VolumeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.MapFlag AccessFlag {
            get {
                return this.AccessFlagField;
            }
            set {
                if ((this.AccessFlagField.Equals(value) != true)) {
                    this.AccessFlagField = value;
                    this.RaisePropertyChanged("AccessFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.MapKind Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIdField, value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IChannelWWN {
            get {
                return this.IChannelWWNField;
            }
            set {
                if ((object.ReferenceEquals(this.IChannelWWNField, value) != true)) {
                    this.IChannelWWNField = value;
                    this.RaisePropertyChanged("IChannelWWN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnable {
            get {
                return this.IsEnableField;
            }
            set {
                if ((this.IsEnableField.Equals(value) != true)) {
                    this.IsEnableField = value;
                    this.RaisePropertyChanged("IsEnable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Lun {
            get {
                return this.LunField;
            }
            set {
                if ((this.LunField.Equals(value) != true)) {
                    this.LunField = value;
                    this.RaisePropertyChanged("Lun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MappingId {
            get {
                return this.MappingIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MappingIdField, value) != true)) {
                    this.MappingIdField = value;
                    this.RaisePropertyChanged("MappingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerId {
            get {
                return this.ServerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIdField, value) != true)) {
                    this.ServerIdField = value;
                    this.RaisePropertyChanged("ServerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TChannelWWN {
            get {
                return this.TChannelWWNField;
            }
            set {
                if ((object.ReferenceEquals(this.TChannelWWNField, value) != true)) {
                    this.TChannelWWNField = value;
                    this.RaisePropertyChanged("TChannelWWN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VolumeId {
            get {
                return this.VolumeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeIdField, value) != true)) {
                    this.VolumeIdField = value;
                    this.RaisePropertyChanged("VolumeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageMapping", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class StorageMapping : OsnTester.OsnProxy.MappingEntry {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IChannelAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IChannelAliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PortState IChannelStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TChannelAliasField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IChannelAddress {
            get {
                return this.IChannelAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IChannelAddressField, value) != true)) {
                    this.IChannelAddressField = value;
                    this.RaisePropertyChanged("IChannelAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IChannelAlias {
            get {
                return this.IChannelAliasField;
            }
            set {
                if ((object.ReferenceEquals(this.IChannelAliasField, value) != true)) {
                    this.IChannelAliasField = value;
                    this.RaisePropertyChanged("IChannelAlias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PortState IChannelState {
            get {
                return this.IChannelStateField;
            }
            set {
                if ((this.IChannelStateField.Equals(value) != true)) {
                    this.IChannelStateField = value;
                    this.RaisePropertyChanged("IChannelState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TChannelAlias {
            get {
                return this.TChannelAliasField;
            }
            set {
                if ((object.ReferenceEquals(this.TChannelAliasField, value) != true)) {
                    this.TChannelAliasField = value;
                    this.RaisePropertyChanged("TChannelAlias");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapFlag", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum MapFlag : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF_READ = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF_WRITE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF_PASSTHROUGH = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF_PALUAPATH = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF_MULTIPORT = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF_DISABLED = 32,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapKind", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum MapKind : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MK_NORMAL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MK_MIRROR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MK_INTERNAL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MK_INTERTVM = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageLunMirror", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.StorageLunMirrorEx))]
    public partial class StorageLunMirror : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.LunMirrorType CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MagicIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.EnlargeRange MiddleVRangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageVolume MiddleVolumeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageVolume MirrorVolumeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageVolume SourceVolumeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.LunMirrorState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.LunMirrorType Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MagicId {
            get {
                return this.MagicIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MagicIdField, value) != true)) {
                    this.MagicIdField = value;
                    this.RaisePropertyChanged("MagicId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.EnlargeRange MiddleVRange {
            get {
                return this.MiddleVRangeField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleVRangeField, value) != true)) {
                    this.MiddleVRangeField = value;
                    this.RaisePropertyChanged("MiddleVRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageVolume MiddleVolume {
            get {
                return this.MiddleVolumeField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleVolumeField, value) != true)) {
                    this.MiddleVolumeField = value;
                    this.RaisePropertyChanged("MiddleVolume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageVolume MirrorVolume {
            get {
                return this.MirrorVolumeField;
            }
            set {
                if ((object.ReferenceEquals(this.MirrorVolumeField, value) != true)) {
                    this.MirrorVolumeField = value;
                    this.RaisePropertyChanged("MirrorVolume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageVolume SourceVolume {
            get {
                return this.SourceVolumeField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceVolumeField, value) != true)) {
                    this.SourceVolumeField = value;
                    this.RaisePropertyChanged("SourceVolume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.LunMirrorState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnlargeRange", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class EnlargeRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint EntendRatioField;
        
        private ulong InitialSizeField;
        
        private ulong MaximumSizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint EntendRatio {
            get {
                return this.EntendRatioField;
            }
            set {
                if ((this.EntendRatioField.Equals(value) != true)) {
                    this.EntendRatioField = value;
                    this.RaisePropertyChanged("EntendRatio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong InitialSize {
            get {
                return this.InitialSizeField;
            }
            set {
                if ((this.InitialSizeField.Equals(value) != true)) {
                    this.InitialSizeField = value;
                    this.RaisePropertyChanged("InitialSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong MaximumSize {
            get {
                return this.MaximumSizeField;
            }
            set {
                if ((this.MaximumSizeField.Equals(value) != true)) {
                    this.MaximumSizeField = value;
                    this.RaisePropertyChanged("MaximumSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageLunMirrorEx", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class StorageLunMirrorEx : OsnTester.OsnProxy.StorageLunMirror {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.AsyncZone AsyncStageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DoProgressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.AsyncZone AsyncStage {
            get {
                return this.AsyncStageField;
            }
            set {
                if ((object.ReferenceEquals(this.AsyncStageField, value) != true)) {
                    this.AsyncStageField = value;
                    this.RaisePropertyChanged("AsyncStage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint DoProgress {
            get {
                return this.DoProgressField;
            }
            set {
                if ((this.DoProgressField.Equals(value) != true)) {
                    this.DoProgressField = value;
                    this.RaisePropertyChanged("DoProgress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerId {
            get {
                return this.ServerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIdField, value) != true)) {
                    this.ServerIdField = value;
                    this.RaisePropertyChanged("ServerId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LunMirrorType", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum LunMirrorType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LMT_DUP_SYNC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LMT_DUP_ASYNC = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LMT_HA_NORMAL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LMT_HA_QUORUM = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LMT_UNKNOWN = 100,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="LunMirrorState", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum LunMirrorState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_UP = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_NEW = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_DISABLED = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_BOTH_DOWN = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_LOCAL_DOWN = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_MIRROR_DOWN = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_IN_RECOVERY = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_IN_INITIALIZE = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_OFFLINE = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_NOT_READY = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_PAUSED = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_UNACTIVED = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LM_STATE_UNKNOWN = 4096,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AsyncZone", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class AsyncZone : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint DataSizeField;
        
        private string DeviceIdField;
        
        private uint IoCountField;
        
        private ulong TotalSizeField;
        
        private uint UsedRatioField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint DataSize {
            get {
                return this.DataSizeField;
            }
            set {
                if ((this.DataSizeField.Equals(value) != true)) {
                    this.DataSizeField = value;
                    this.RaisePropertyChanged("DataSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIdField, value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint IoCount {
            get {
                return this.IoCountField;
            }
            set {
                if ((this.IoCountField.Equals(value) != true)) {
                    this.IoCountField = value;
                    this.RaisePropertyChanged("IoCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong TotalSize {
            get {
                return this.TotalSizeField;
            }
            set {
                if ((this.TotalSizeField.Equals(value) != true)) {
                    this.TotalSizeField = value;
                    this.RaisePropertyChanged("TotalSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UsedRatio {
            get {
                return this.UsedRatioField;
            }
            set {
                if ((this.UsedRatioField.Equals(value) != true)) {
                    this.UsedRatioField = value;
                    this.RaisePropertyChanged("UsedRatio");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNFilter", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    public enum OSNFilter : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLT_DRIVE_NORMAL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLT_DRIVE_UNUSED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLT_DRIVE_MAPPING = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLT_DRIVE_UNMAPPING = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLT_DRIVE_LMSOURCE_SYNC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLT_DRIVE_LMSOURCE_ASYNC = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLT_DRIVE_LMMIDDLE = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageClient", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class StorageClient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ChannelCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.GenState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.OSType SystemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ChannelCount {
            get {
                return this.ChannelCountField;
            }
            set {
                if ((this.ChannelCountField.Equals(value) != true)) {
                    this.ChannelCountField = value;
                    this.RaisePropertyChanged("ChannelCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIdField, value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientIp {
            get {
                return this.ClientIpField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientIpField, value) != true)) {
                    this.ClientIpField = value;
                    this.RaisePropertyChanged("ClientIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.GenState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.OSType System {
            get {
                return this.SystemField;
            }
            set {
                if ((this.SystemField.Equals(value) != true)) {
                    this.SystemField = value;
                    this.RaisePropertyChanged("System");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenState", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum GenState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_ONLINE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_DEGRATE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_OFFLINE = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSType", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum OSType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Windows = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Linux = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Solaris = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HPUnix = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AIX = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Other = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StoragePool", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class StoragePool : OsnTester.OsnProxy.StoragePoolBasis {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StoragePoolBasis", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.StoragePool))]
    public partial class StoragePoolBasis : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PoolStyle CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.RedundanceLevel FtLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMultiSharedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PoolIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PoolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageState PoolStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong TotalSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint UnitSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong UsedSizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PoolStyle Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.RedundanceLevel FtLevel {
            get {
                return this.FtLevelField;
            }
            set {
                if ((this.FtLevelField.Equals(value) != true)) {
                    this.FtLevelField = value;
                    this.RaisePropertyChanged("FtLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMultiShared {
            get {
                return this.IsMultiSharedField;
            }
            set {
                if ((this.IsMultiSharedField.Equals(value) != true)) {
                    this.IsMultiSharedField = value;
                    this.RaisePropertyChanged("IsMultiShared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PoolId {
            get {
                return this.PoolIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PoolIdField, value) != true)) {
                    this.PoolIdField = value;
                    this.RaisePropertyChanged("PoolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PoolName {
            get {
                return this.PoolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PoolNameField, value) != true)) {
                    this.PoolNameField = value;
                    this.RaisePropertyChanged("PoolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageState PoolState {
            get {
                return this.PoolStateField;
            }
            set {
                if ((this.PoolStateField.Equals(value) != true)) {
                    this.PoolStateField = value;
                    this.RaisePropertyChanged("PoolState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong TotalSize {
            get {
                return this.TotalSizeField;
            }
            set {
                if ((this.TotalSizeField.Equals(value) != true)) {
                    this.TotalSizeField = value;
                    this.RaisePropertyChanged("TotalSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint UnitSize {
            get {
                return this.UnitSizeField;
            }
            set {
                if ((this.UnitSizeField.Equals(value) != true)) {
                    this.UnitSizeField = value;
                    this.RaisePropertyChanged("UnitSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong UsedSize {
            get {
                return this.UsedSizeField;
            }
            set {
                if ((this.UsedSizeField.Equals(value) != true)) {
                    this.UsedSizeField = value;
                    this.RaisePropertyChanged("UsedSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PoolStyle", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum PoolStyle : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_STATIC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_TRANSPARENT = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_DYNAMIC_BASE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_DYNAMIC_MIRROR = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_DYNAMIC_PM = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_DYNAMIC_LB = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_DYNAMIC_ASM = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POOL_UNKNOWN = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RedundanceLevel", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum RedundanceLevel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FT_LEVEL_NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FT_LEVEL_ONE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FT_LEVEL_TWO = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FT_LEVEL_THREE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FT_LEVEL_UNKNOWN = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNLogItem", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class OSNLogItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GenericCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.LogType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GenericCode {
            get {
                return this.GenericCodeField;
            }
            set {
                if ((this.GenericCodeField.Equals(value) != true)) {
                    this.GenericCodeField = value;
                    this.RaisePropertyChanged("GenericCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.LogType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogType", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum LogType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNAlarmLogItem", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNAlarmLogItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupIDField;
        
        private string GroupNameField;
        
        private string InformationField;
        
        private string MessageField;
        
        private string ServerIDField;
        
        private string ServerNameField;
        
        private string SourceField;
        
        private System.DateTime TimeField;
        
        private OsnTester.OsnProxy.LogType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIDField, value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Information {
            get {
                return this.InformationField;
            }
            set {
                if ((object.ReferenceEquals(this.InformationField, value) != true)) {
                    this.InformationField = value;
                    this.RaisePropertyChanged("Information");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ServerID {
            get {
                return this.ServerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIDField, value) != true)) {
                    this.ServerIDField = value;
                    this.RaisePropertyChanged("ServerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.LogType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNCDPSetting", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNCDPSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BufIncrementField;
        
        private string BufVolumeIdField;
        
        private ulong BufVolumeMaxSizeField;
        
        private uint CdpUnitSizeField;
        
        private string GroupIdField;
        
        private bool IsNewassignField;
        
        private uint MaxBitmapBufferSizeField;
        
        private string OwnerIdField;
        
        private ulong UsedSizeField;
        
        private string VolumeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BufIncrement {
            get {
                return this.BufIncrementField;
            }
            set {
                if ((this.BufIncrementField.Equals(value) != true)) {
                    this.BufIncrementField = value;
                    this.RaisePropertyChanged("BufIncrement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string BufVolumeId {
            get {
                return this.BufVolumeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BufVolumeIdField, value) != true)) {
                    this.BufVolumeIdField = value;
                    this.RaisePropertyChanged("BufVolumeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong BufVolumeMaxSize {
            get {
                return this.BufVolumeMaxSizeField;
            }
            set {
                if ((this.BufVolumeMaxSizeField.Equals(value) != true)) {
                    this.BufVolumeMaxSizeField = value;
                    this.RaisePropertyChanged("BufVolumeMaxSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint CdpUnitSize {
            get {
                return this.CdpUnitSizeField;
            }
            set {
                if ((this.CdpUnitSizeField.Equals(value) != true)) {
                    this.CdpUnitSizeField = value;
                    this.RaisePropertyChanged("CdpUnitSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsNewassign {
            get {
                return this.IsNewassignField;
            }
            set {
                if ((this.IsNewassignField.Equals(value) != true)) {
                    this.IsNewassignField = value;
                    this.RaisePropertyChanged("IsNewassign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint MaxBitmapBufferSize {
            get {
                return this.MaxBitmapBufferSizeField;
            }
            set {
                if ((this.MaxBitmapBufferSizeField.Equals(value) != true)) {
                    this.MaxBitmapBufferSizeField = value;
                    this.RaisePropertyChanged("MaxBitmapBufferSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerIdField, value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong UsedSize {
            get {
                return this.UsedSizeField;
            }
            set {
                if ((this.UsedSizeField.Equals(value) != true)) {
                    this.UsedSizeField = value;
                    this.RaisePropertyChanged("UsedSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string VolumeId {
            get {
                return this.VolumeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeIdField, value) != true)) {
                    this.VolumeIdField = value;
                    this.RaisePropertyChanged("VolumeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CDPSnapshotDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class CDPSnapshotDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private OsnTester.OsnProxy.SnapShotStatus CIStatusField;
        
        private uint DataSizeField;
        
        private bool IsLoopBackField;
        
        private uint RestoreProgressField;
        
        private string RestoreVolumeIDField;
        
        private OsnTester.OsnProxy.CDP_RESTORE_STATE RestoredStateField;
        
        private OsnTester.OsnProxy.SNAPSHOT_LABEL SnapshotLabelField;
        
        private System.DateTime SnapshotTimeField;
        
        private long intSnapshotTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.SnapShotStatus CIStatus {
            get {
                return this.CIStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.CIStatusField, value) != true)) {
                    this.CIStatusField = value;
                    this.RaisePropertyChanged("CIStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint DataSize {
            get {
                return this.DataSizeField;
            }
            set {
                if ((this.DataSizeField.Equals(value) != true)) {
                    this.DataSizeField = value;
                    this.RaisePropertyChanged("DataSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsLoopBack {
            get {
                return this.IsLoopBackField;
            }
            set {
                if ((this.IsLoopBackField.Equals(value) != true)) {
                    this.IsLoopBackField = value;
                    this.RaisePropertyChanged("IsLoopBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint RestoreProgress {
            get {
                return this.RestoreProgressField;
            }
            set {
                if ((this.RestoreProgressField.Equals(value) != true)) {
                    this.RestoreProgressField = value;
                    this.RaisePropertyChanged("RestoreProgress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string RestoreVolumeID {
            get {
                return this.RestoreVolumeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RestoreVolumeIDField, value) != true)) {
                    this.RestoreVolumeIDField = value;
                    this.RaisePropertyChanged("RestoreVolumeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.CDP_RESTORE_STATE RestoredState {
            get {
                return this.RestoredStateField;
            }
            set {
                if ((this.RestoredStateField.Equals(value) != true)) {
                    this.RestoredStateField = value;
                    this.RaisePropertyChanged("RestoredState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.SNAPSHOT_LABEL SnapshotLabel {
            get {
                return this.SnapshotLabelField;
            }
            set {
                if ((this.SnapshotLabelField.Equals(value) != true)) {
                    this.SnapshotLabelField = value;
                    this.RaisePropertyChanged("SnapshotLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime SnapshotTime {
            get {
                return this.SnapshotTimeField;
            }
            set {
                if ((this.SnapshotTimeField.Equals(value) != true)) {
                    this.SnapshotTimeField = value;
                    this.RaisePropertyChanged("SnapshotTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long intSnapshotTime {
            get {
                return this.intSnapshotTimeField;
            }
            set {
                if ((this.intSnapshotTimeField.Equals(value) != true)) {
                    this.intSnapshotTimeField = value;
                    this.RaisePropertyChanged("intSnapshotTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnapShotStatus", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class SnapShotStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint CIPercentageField;
        
        private uint CIStatusField;
        
        private uint StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint CIPercentage {
            get {
                return this.CIPercentageField;
            }
            set {
                if ((this.CIPercentageField.Equals(value) != true)) {
                    this.CIPercentageField = value;
                    this.RaisePropertyChanged("CIPercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint CIStatus {
            get {
                return this.CIStatusField;
            }
            set {
                if ((this.CIStatusField.Equals(value) != true)) {
                    this.CIStatusField = value;
                    this.RaisePropertyChanged("CIStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CDP_RESTORE_STATE", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum CDP_RESTORE_STATE : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_NOT_IN_RESTORE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_START_RESTORE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_RESTORING = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_RESTORED = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_ABORTED = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_UNKNOWN = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SNAPSHOT_LABEL", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum SNAPSHOT_LABEL : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LABEL_UNDEFINED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LABEL_CREATE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LABEL_MARKER = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LABEL_MIRROR_MARKER = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LABEL_HACDP_MARKER = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CDP_LABEL_GROUP_MARKER = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNCDPInfo", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNCDPInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int CdpCountField;
        
        private System.DateTime LatelySnapshotTimeField;
        
        private OsnTester.OsnProxy.OSNVolume VolumeField;
        
        private System.DateTime VolumeCreateTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int CdpCount {
            get {
                return this.CdpCountField;
            }
            set {
                if ((this.CdpCountField.Equals(value) != true)) {
                    this.CdpCountField = value;
                    this.RaisePropertyChanged("CdpCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime LatelySnapshotTime {
            get {
                return this.LatelySnapshotTimeField;
            }
            set {
                if ((this.LatelySnapshotTimeField.Equals(value) != true)) {
                    this.LatelySnapshotTimeField = value;
                    this.RaisePropertyChanged("LatelySnapshotTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.OSNVolume Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeField, value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime VolumeCreateTime {
            get {
                return this.VolumeCreateTimeField;
            }
            set {
                if ((this.VolumeCreateTimeField.Equals(value) != true)) {
                    this.VolumeCreateTimeField = value;
                    this.RaisePropertyChanged("VolumeCreateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNVolume", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNVolume : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string IdField;
        
        private bool IsNewAssignField;
        
        private OsnTester.OsnProxy.VolumeMarker MarkerField;
        
        private string NameField;
        
        private string PoolIdField;
        
        private OsnTester.OsnProxy.VolumeProfile ProfileField;
        
        private ulong SizeField;
        
        private OsnTester.OsnProxy.StorageState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsNewAssign {
            get {
                return this.IsNewAssignField;
            }
            set {
                if ((this.IsNewAssignField.Equals(value) != true)) {
                    this.IsNewAssignField = value;
                    this.RaisePropertyChanged("IsNewAssign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.VolumeMarker Marker {
            get {
                return this.MarkerField;
            }
            set {
                if ((this.MarkerField.Equals(value) != true)) {
                    this.MarkerField = value;
                    this.RaisePropertyChanged("Marker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string PoolId {
            get {
                return this.PoolIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PoolIdField, value) != true)) {
                    this.PoolIdField = value;
                    this.RaisePropertyChanged("PoolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.VolumeProfile Profile {
            get {
                return this.ProfileField;
            }
            set {
                if ((this.ProfileField.Equals(value) != true)) {
                    this.ProfileField = value;
                    this.RaisePropertyChanged("Profile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.StorageState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageCDPSnapshotInfo", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class PageCDPSnapshotInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private OsnTester.OsnProxy.CDPSnapshotDetailInfo[] InfomationListField;
        
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.CDPSnapshotDetailInfo[] InfomationList {
            get {
                return this.InfomationListField;
            }
            set {
                if ((object.ReferenceEquals(this.InfomationListField, value) != true)) {
                    this.InfomationListField = value;
                    this.RaisePropertyChanged("InfomationList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageCDPInfo", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class PageCDPInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private OsnTester.OsnProxy.OSNCDPInfo[] InfomationListField;
        
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.OSNCDPInfo[] InfomationList {
            get {
                return this.InfomationListField;
            }
            set {
                if ((object.ReferenceEquals(this.InfomationListField, value) != true)) {
                    this.InfomationListField = value;
                    this.RaisePropertyChanged("InfomationList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNSchedule", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNSchedule : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DayListField;
        
        private System.DateTime EndTimeField;
        
        private int IntervalField;
        
        private string MinuteIntervalField;
        
        private string MonthListField;
        
        private System.DateTime StartTimeField;
        
        private OsnTester.OsnProxy.ScheduleTarget TargetField;
        
        private string TimeListField;
        
        private string TimePairListField;
        
        private OsnTester.OsnProxy.ScheduleType TypeField;
        
        private string WeekIndexListField;
        
        private string WeekListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DayList {
            get {
                return this.DayListField;
            }
            set {
                if ((object.ReferenceEquals(this.DayListField, value) != true)) {
                    this.DayListField = value;
                    this.RaisePropertyChanged("DayList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Interval {
            get {
                return this.IntervalField;
            }
            set {
                if ((this.IntervalField.Equals(value) != true)) {
                    this.IntervalField = value;
                    this.RaisePropertyChanged("Interval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string MinuteInterval {
            get {
                return this.MinuteIntervalField;
            }
            set {
                if ((object.ReferenceEquals(this.MinuteIntervalField, value) != true)) {
                    this.MinuteIntervalField = value;
                    this.RaisePropertyChanged("MinuteInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string MonthList {
            get {
                return this.MonthListField;
            }
            set {
                if ((object.ReferenceEquals(this.MonthListField, value) != true)) {
                    this.MonthListField = value;
                    this.RaisePropertyChanged("MonthList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.ScheduleTarget Target {
            get {
                return this.TargetField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetField, value) != true)) {
                    this.TargetField = value;
                    this.RaisePropertyChanged("Target");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TimeList {
            get {
                return this.TimeListField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeListField, value) != true)) {
                    this.TimeListField = value;
                    this.RaisePropertyChanged("TimeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TimePairList {
            get {
                return this.TimePairListField;
            }
            set {
                if ((object.ReferenceEquals(this.TimePairListField, value) != true)) {
                    this.TimePairListField = value;
                    this.RaisePropertyChanged("TimePairList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.ScheduleType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string WeekIndexList {
            get {
                return this.WeekIndexListField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekIndexListField, value) != true)) {
                    this.WeekIndexListField = value;
                    this.RaisePropertyChanged("WeekIndexList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string WeekList {
            get {
                return this.WeekListField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekListField, value) != true)) {
                    this.WeekListField = value;
                    this.RaisePropertyChanged("WeekList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleTarget", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class ScheduleTarget : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupIdField;
        
        private int HighLevelField;
        
        private bool IsDualPortField;
        
        private int LowLevelField;
        
        private OsnTester.OsnProxy.ScheduleMode ModeField;
        
        private string SourceIdField;
        
        private string TargetIdField;
        
        private string TemplateNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int HighLevel {
            get {
                return this.HighLevelField;
            }
            set {
                if ((this.HighLevelField.Equals(value) != true)) {
                    this.HighLevelField = value;
                    this.RaisePropertyChanged("HighLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsDualPort {
            get {
                return this.IsDualPortField;
            }
            set {
                if ((this.IsDualPortField.Equals(value) != true)) {
                    this.IsDualPortField = value;
                    this.RaisePropertyChanged("IsDualPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LowLevel {
            get {
                return this.LowLevelField;
            }
            set {
                if ((this.LowLevelField.Equals(value) != true)) {
                    this.LowLevelField = value;
                    this.RaisePropertyChanged("LowLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.ScheduleMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SourceId {
            get {
                return this.SourceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceIdField, value) != true)) {
                    this.SourceIdField = value;
                    this.RaisePropertyChanged("SourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TargetId {
            get {
                return this.TargetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetIdField, value) != true)) {
                    this.TargetIdField = value;
                    this.RaisePropertyChanged("TargetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TemplateName {
            get {
                return this.TemplateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateNameField, value) != true)) {
                    this.TemplateNameField = value;
                    this.RaisePropertyChanged("TemplateName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleType", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum ScheduleType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DAY = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WEEK = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MONTH = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleMode", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum ScheduleMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CDP = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LUNMIRROR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DR = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TEMPLATE = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNDiskInfo", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNDiskInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ulong TotalSizeField;
        
        private ulong UsedSizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong TotalSize {
            get {
                return this.TotalSizeField;
            }
            set {
                if ((this.TotalSizeField.Equals(value) != true)) {
                    this.TotalSizeField = value;
                    this.RaisePropertyChanged("TotalSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong UsedSize {
            get {
                return this.UsedSizeField;
            }
            set {
                if ((this.UsedSizeField.Equals(value) != true)) {
                    this.UsedSizeField = value;
                    this.RaisePropertyChanged("UsedSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Performance", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class Performance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupidField;
        
        private long ReadBpsField;
        
        private long ReadIOPSField;
        
        private System.DateTime TimeField;
        
        private long TotalBpsField;
        
        private long TotalIOPSField;
        
        private long WriteBpsField;
        
        private long WriteIOPSField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Groupid {
            get {
                return this.GroupidField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupidField, value) != true)) {
                    this.GroupidField = value;
                    this.RaisePropertyChanged("Groupid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ReadBps {
            get {
                return this.ReadBpsField;
            }
            set {
                if ((this.ReadBpsField.Equals(value) != true)) {
                    this.ReadBpsField = value;
                    this.RaisePropertyChanged("ReadBps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ReadIOPS {
            get {
                return this.ReadIOPSField;
            }
            set {
                if ((this.ReadIOPSField.Equals(value) != true)) {
                    this.ReadIOPSField = value;
                    this.RaisePropertyChanged("ReadIOPS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long TotalBps {
            get {
                return this.TotalBpsField;
            }
            set {
                if ((this.TotalBpsField.Equals(value) != true)) {
                    this.TotalBpsField = value;
                    this.RaisePropertyChanged("TotalBps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long TotalIOPS {
            get {
                return this.TotalIOPSField;
            }
            set {
                if ((this.TotalIOPSField.Equals(value) != true)) {
                    this.TotalIOPSField = value;
                    this.RaisePropertyChanged("TotalIOPS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long WriteBps {
            get {
                return this.WriteBpsField;
            }
            set {
                if ((this.WriteBpsField.Equals(value) != true)) {
                    this.WriteBpsField = value;
                    this.RaisePropertyChanged("WriteBps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long WriteIOPS {
            get {
                return this.WriteIOPSField;
            }
            set {
                if ((this.WriteIOPSField.Equals(value) != true)) {
                    this.WriteIOPSField = value;
                    this.RaisePropertyChanged("WriteIOPS");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IpmiStatus", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum IpmiStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unsupport = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inactive = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRole", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    public enum UserRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Root = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Admin = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        User = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Guest = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 100,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNUser", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class OSNUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LoginTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.UserRole RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LoginTime {
            get {
                return this.LoginTimeField;
            }
            set {
                if ((this.LoginTimeField.Equals(value) != true)) {
                    this.LoginTimeField = value;
                    this.RaisePropertyChanged("LoginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.UserRole Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNGroup", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class OSNGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.OSType CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.GroupRole RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.SwitchState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.OSType Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.GroupRole Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.SwitchState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupRole", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    public enum GroupRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GR_UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GR_HOST = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GR_BACKUP = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SwitchState", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    public enum SwitchState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SS_UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SS_NOT_SWITCH = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SS_SWITCH = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNServer", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class OSNServer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint AccessPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.HealthyLevel HealthyFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpmiIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpmiPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpmiUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PrimaryFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.OSNTarget TargetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessIP {
            get {
                return this.AccessIPField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessIPField, value) != true)) {
                    this.AccessIPField = value;
                    this.RaisePropertyChanged("AccessIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint AccessPort {
            get {
                return this.AccessPortField;
            }
            set {
                if ((this.AccessPortField.Equals(value) != true)) {
                    this.AccessPortField = value;
                    this.RaisePropertyChanged("AccessPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.HealthyLevel HealthyFlag {
            get {
                return this.HealthyFlagField;
            }
            set {
                if ((this.HealthyFlagField.Equals(value) != true)) {
                    this.HealthyFlagField = value;
                    this.RaisePropertyChanged("HealthyFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpmiIP {
            get {
                return this.IpmiIPField;
            }
            set {
                if ((object.ReferenceEquals(this.IpmiIPField, value) != true)) {
                    this.IpmiIPField = value;
                    this.RaisePropertyChanged("IpmiIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpmiPassword {
            get {
                return this.IpmiPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.IpmiPasswordField, value) != true)) {
                    this.IpmiPasswordField = value;
                    this.RaisePropertyChanged("IpmiPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpmiUser {
            get {
                return this.IpmiUserField;
            }
            set {
                if ((object.ReferenceEquals(this.IpmiUserField, value) != true)) {
                    this.IpmiUserField = value;
                    this.RaisePropertyChanged("IpmiUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PrimaryFlag {
            get {
                return this.PrimaryFlagField;
            }
            set {
                if ((this.PrimaryFlagField.Equals(value) != true)) {
                    this.PrimaryFlagField = value;
                    this.RaisePropertyChanged("PrimaryFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.OSNTarget Target {
            get {
                return this.TargetField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetField, value) != true)) {
                    this.TargetField = value;
                    this.RaisePropertyChanged("Target");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNTarget", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNTarget : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private OsnTester.OsnProxy.OSType CategoryField;
        
        private bool FlagField;
        
        private string GroupIdField;
        
        private string[] HeartbeatIpField;
        
        private bool NewAssignField;
        
        private string ServerIdField;
        
        private uint ServerIndexField;
        
        private string ServerNameField;
        
        private string ServerWWNField;
        
        private string TargetIpField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.OSType Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Flag {
            get {
                return this.FlagField;
            }
            set {
                if ((this.FlagField.Equals(value) != true)) {
                    this.FlagField = value;
                    this.RaisePropertyChanged("Flag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] HeartbeatIp {
            get {
                return this.HeartbeatIpField;
            }
            set {
                if ((object.ReferenceEquals(this.HeartbeatIpField, value) != true)) {
                    this.HeartbeatIpField = value;
                    this.RaisePropertyChanged("HeartbeatIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool NewAssign {
            get {
                return this.NewAssignField;
            }
            set {
                if ((this.NewAssignField.Equals(value) != true)) {
                    this.NewAssignField = value;
                    this.RaisePropertyChanged("NewAssign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ServerId {
            get {
                return this.ServerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerIdField, value) != true)) {
                    this.ServerIdField = value;
                    this.RaisePropertyChanged("ServerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint ServerIndex {
            get {
                return this.ServerIndexField;
            }
            set {
                if ((this.ServerIndexField.Equals(value) != true)) {
                    this.ServerIndexField = value;
                    this.RaisePropertyChanged("ServerIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ServerWWN {
            get {
                return this.ServerWWNField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerWWNField, value) != true)) {
                    this.ServerWWNField = value;
                    this.RaisePropertyChanged("ServerWWN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TargetIp {
            get {
                return this.TargetIpField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetIpField, value) != true)) {
                    this.TargetIpField = value;
                    this.RaisePropertyChanged("TargetIp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HealthyLevel", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    public enum HealthyLevel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OFFLINE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNAVAILABLE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DEGRADE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENABLE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SYNCING = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseAuth", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class LicenseAuth : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private OsnTester.OsnProxy.LicenseItem AuthCodeField;
        
        private OsnTester.OsnProxy.LicenseVersion AuthVersionField;
        
        private ulong CapacityLimitField;
        
        private uint ClientsLimitField;
        
        private int RemainingDaysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.LicenseItem AuthCode {
            get {
                return this.AuthCodeField;
            }
            set {
                if ((this.AuthCodeField.Equals(value) != true)) {
                    this.AuthCodeField = value;
                    this.RaisePropertyChanged("AuthCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.LicenseVersion AuthVersion {
            get {
                return this.AuthVersionField;
            }
            set {
                if ((this.AuthVersionField.Equals(value) != true)) {
                    this.AuthVersionField = value;
                    this.RaisePropertyChanged("AuthVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong CapacityLimit {
            get {
                return this.CapacityLimitField;
            }
            set {
                if ((this.CapacityLimitField.Equals(value) != true)) {
                    this.CapacityLimitField = value;
                    this.RaisePropertyChanged("CapacityLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint ClientsLimit {
            get {
                return this.ClientsLimitField;
            }
            set {
                if ((this.ClientsLimitField.Equals(value) != true)) {
                    this.ClientsLimitField = value;
                    this.RaisePropertyChanged("ClientsLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RemainingDays {
            get {
                return this.RemainingDaysField;
            }
            set {
                if ((this.RemainingDaysField.Equals(value) != true)) {
                    this.RemainingDaysField = value;
                    this.RaisePropertyChanged("RemainingDays");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseItem", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum LicenseItem : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_FC_SUPPORT = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_HA_SUPPORT = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_CDP_SUPPORT = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_REPLICATION_SUPPORT = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_SNAPSHOT_SUPPORT = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_DM_SUPPORT = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_TVM_SUPPORT = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_LUNMIRROR_SUPPORT = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_SAN_BASE_SUPPORT = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_NAS_BASE_SUPPORT = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_DR_SOURCE_SUPPORT = 4096,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_DR_TARGET_SUPPORT = 8192,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_CLIENT_REPLICATION_SUPPORT = 16384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseVersion", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum LicenseVersion : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_TRIAL_FULL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_TRIAL_SAN = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_TRIAL_CDP = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_TRIAL_NAS = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_AUTH = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_DATAGUARD_TRAIL = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_HAEXPRESS_TRAIL = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_STREAMER_TRAIL = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LICENSE_UNKNOWN = 32768,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OSNSystem", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class OSNSystem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CPUDescriptionField;
        
        private string[] IPAddressArrayField;
        
        private OsnTester.OsnProxy.LicenseAuth LicenceField;
        
        private string OSDescriptionField;
        
        private string ProductNameField;
        
        private string ProductVersionField;
        
        private uint TotalMemorySizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string CPUDescription {
            get {
                return this.CPUDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CPUDescriptionField, value) != true)) {
                    this.CPUDescriptionField = value;
                    this.RaisePropertyChanged("CPUDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] IPAddressArray {
            get {
                return this.IPAddressArrayField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressArrayField, value) != true)) {
                    this.IPAddressArrayField = value;
                    this.RaisePropertyChanged("IPAddressArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.LicenseAuth Licence {
            get {
                return this.LicenceField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenceField, value) != true)) {
                    this.LicenceField = value;
                    this.RaisePropertyChanged("Licence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string OSDescription {
            get {
                return this.OSDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.OSDescriptionField, value) != true)) {
                    this.OSDescriptionField = value;
                    this.RaisePropertyChanged("OSDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ProductVersion {
            get {
                return this.ProductVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductVersionField, value) != true)) {
                    this.ProductVersionField = value;
                    this.RaisePropertyChanged("ProductVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TotalMemorySize {
            get {
                return this.TotalMemorySizeField;
            }
            set {
                if ((this.TotalMemorySizeField.Equals(value) != true)) {
                    this.TotalMemorySizeField = value;
                    this.RaisePropertyChanged("TotalMemorySize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageAttribute", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class StorageAttribute : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageMode ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageMode", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum StorageMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOR_STANDBY = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOR_ACTIVE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOR_OFFLINE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOR_NOTSURE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOR_UNKNOWN = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskDrive", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.PoolDisk))]
    public partial class DiskDrive : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private OsnTester.OsnProxy.DiskAnchor AnchorField;
        
        private uint BusNumberField;
        
        private uint IndexField;
        
        private uint LunField;
        
        private string ModelField;
        
        private uint PartionsField;
        
        private uint PortField;
        
        private string ProductIdField;
        
        private uint SignatureField;
        
        private ulong SizeField;
        
        private OsnTester.OsnProxy.DriveState StateField;
        
        private uint TargetIdField;
        
        private string UniqueIdField;
        
        private string VendorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.DiskAnchor Anchor {
            get {
                return this.AnchorField;
            }
            set {
                if ((this.AnchorField.Equals(value) != true)) {
                    this.AnchorField = value;
                    this.RaisePropertyChanged("Anchor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BusNumber {
            get {
                return this.BusNumberField;
            }
            set {
                if ((this.BusNumberField.Equals(value) != true)) {
                    this.BusNumberField = value;
                    this.RaisePropertyChanged("BusNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint Lun {
            get {
                return this.LunField;
            }
            set {
                if ((this.LunField.Equals(value) != true)) {
                    this.LunField = value;
                    this.RaisePropertyChanged("Lun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint Partions {
            get {
                return this.PartionsField;
            }
            set {
                if ((this.PartionsField.Equals(value) != true)) {
                    this.PartionsField = value;
                    this.RaisePropertyChanged("Partions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint Signature {
            get {
                return this.SignatureField;
            }
            set {
                if ((this.SignatureField.Equals(value) != true)) {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.DriveState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TargetId {
            get {
                return this.TargetIdField;
            }
            set {
                if ((this.TargetIdField.Equals(value) != true)) {
                    this.TargetIdField = value;
                    this.RaisePropertyChanged("TargetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdField, value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Vendor {
            get {
                return this.VendorField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorField, value) != true)) {
                    this.VendorField = value;
                    this.RaisePropertyChanged("Vendor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PoolDisk", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class PoolDisk : OsnTester.OsnProxy.DiskDrive {
        
        private string[] DescriptorField;
        
        private string DiskIdField;
        
        private ulong FreedSizeField;
        
        private string PoolIdField;
        
        private ulong UsedSizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] Descriptor {
            get {
                return this.DescriptorField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptorField, value) != true)) {
                    this.DescriptorField = value;
                    this.RaisePropertyChanged("Descriptor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DiskId {
            get {
                return this.DiskIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DiskIdField, value) != true)) {
                    this.DiskIdField = value;
                    this.RaisePropertyChanged("DiskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong FreedSize {
            get {
                return this.FreedSizeField;
            }
            set {
                if ((this.FreedSizeField.Equals(value) != true)) {
                    this.FreedSizeField = value;
                    this.RaisePropertyChanged("FreedSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string PoolId {
            get {
                return this.PoolIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PoolIdField, value) != true)) {
                    this.PoolIdField = value;
                    this.RaisePropertyChanged("PoolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong UsedSize {
            get {
                return this.UsedSizeField;
            }
            set {
                if ((this.UsedSizeField.Equals(value) != true)) {
                    this.UsedSizeField = value;
                    this.RaisePropertyChanged("UsedSize");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskAnchor", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum DiskAnchor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANCHOR_NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANCHOR_FAST = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANCHOR_NORMAL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANCHOR_SLOW = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANCHOR_DG0 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANCHOR_DG1 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANCHOR_ANALOG = 12,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DriveState", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    public enum DriveState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_ONLINE_RAW = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_ONLINE_INIT = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_OFFLINE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_INACCESSIBLE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATE_UNKNOWN = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskItem", Namespace="http://schemas.datacontract.org/2004/07/OSNSPlatformService.DataType")]
    [System.SerializableAttribute()]
    public partial class DiskItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.DiskAnchor AnchorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint IndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.DiskAnchor Anchor {
            get {
                return this.AnchorField;
            }
            set {
                if ((this.AnchorField.Equals(value) != true)) {
                    this.AnchorField = value;
                    this.RaisePropertyChanged("Anchor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Index {
            get {
                return this.IndexField;
            }
            set {
                if ((this.IndexField.Equals(value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueIdField, value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeGroup", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class VolumeGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageVolume[] VolumesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupIdField, value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageVolume[] Volumes {
            get {
                return this.VolumesField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumesField, value) != true)) {
                    this.VolumesField = value;
                    this.RaisePropertyChanged("Volumes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringsPair", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class StringsPair : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string KeyField;
        
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ASTPolicy", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class ASTPolicy : OsnTester.OsnProxy.ASTPattern {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyId {
            get {
                return this.PolicyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyIdField, value) != true)) {
                    this.PolicyIdField = value;
                    this.RaisePropertyChanged("PolicyId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ASTPattern", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.ASTPolicy))]
    public partial class ASTPattern : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort DecayPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoNotMigrateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint GatherIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort HistoryAdjustPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint MaxMigrateCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort MigrateAdjustPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint MigrateIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort MinMigratePercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.PolicyMode ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort MustMigratePercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort ProtectionPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort DecayPercent {
            get {
                return this.DecayPercentField;
            }
            set {
                if ((this.DecayPercentField.Equals(value) != true)) {
                    this.DecayPercentField = value;
                    this.RaisePropertyChanged("DecayPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoNotMigrate {
            get {
                return this.DoNotMigrateField;
            }
            set {
                if ((object.ReferenceEquals(this.DoNotMigrateField, value) != true)) {
                    this.DoNotMigrateField = value;
                    this.RaisePropertyChanged("DoNotMigrate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint GatherInterval {
            get {
                return this.GatherIntervalField;
            }
            set {
                if ((this.GatherIntervalField.Equals(value) != true)) {
                    this.GatherIntervalField = value;
                    this.RaisePropertyChanged("GatherInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort HistoryAdjustPercent {
            get {
                return this.HistoryAdjustPercentField;
            }
            set {
                if ((this.HistoryAdjustPercentField.Equals(value) != true)) {
                    this.HistoryAdjustPercentField = value;
                    this.RaisePropertyChanged("HistoryAdjustPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint MaxMigrateCount {
            get {
                return this.MaxMigrateCountField;
            }
            set {
                if ((this.MaxMigrateCountField.Equals(value) != true)) {
                    this.MaxMigrateCountField = value;
                    this.RaisePropertyChanged("MaxMigrateCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort MigrateAdjustPercent {
            get {
                return this.MigrateAdjustPercentField;
            }
            set {
                if ((this.MigrateAdjustPercentField.Equals(value) != true)) {
                    this.MigrateAdjustPercentField = value;
                    this.RaisePropertyChanged("MigrateAdjustPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint MigrateInterval {
            get {
                return this.MigrateIntervalField;
            }
            set {
                if ((this.MigrateIntervalField.Equals(value) != true)) {
                    this.MigrateIntervalField = value;
                    this.RaisePropertyChanged("MigrateInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort MinMigratePercent {
            get {
                return this.MinMigratePercentField;
            }
            set {
                if ((this.MinMigratePercentField.Equals(value) != true)) {
                    this.MinMigratePercentField = value;
                    this.RaisePropertyChanged("MinMigratePercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.PolicyMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModeName {
            get {
                return this.ModeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeNameField, value) != true)) {
                    this.ModeNameField = value;
                    this.RaisePropertyChanged("ModeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort MustMigratePercent {
            get {
                return this.MustMigratePercentField;
            }
            set {
                if ((this.MustMigratePercentField.Equals(value) != true)) {
                    this.MustMigratePercentField = value;
                    this.RaisePropertyChanged("MustMigratePercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort ProtectionPeriod {
            get {
                return this.ProtectionPeriodField;
            }
            set {
                if ((this.ProtectionPeriodField.Equals(value) != true)) {
                    this.ProtectionPeriodField = value;
                    this.RaisePropertyChanged("ProtectionPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PolicyMode", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    public enum PolicyMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PM_DEFAULT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PM_CUSTOM = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PM_CUSTOM_TEMP = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PM_NONE = 255,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceDisplay", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.PoolDisplay))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.VolumeDisplay))]
    public partial class DeviceDisplay : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DeviceIdField;
        
        private OsnTester.OsnProxy.TierDisplay[] TiersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIdField, value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.TierDisplay[] Tiers {
            get {
                return this.TiersField;
            }
            set {
                if ((object.ReferenceEquals(this.TiersField, value) != true)) {
                    this.TiersField = value;
                    this.RaisePropertyChanged("Tiers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PoolDisplay", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class PoolDisplay : OsnTester.OsnProxy.DeviceDisplay {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StoragePool PoolInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StoragePool PoolInfo {
            get {
                return this.PoolInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.PoolInfoField, value) != true)) {
                    this.PoolInfoField = value;
                    this.RaisePropertyChanged("PoolInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VolumeDisplay", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Repository.DataType")]
    [System.SerializableAttribute()]
    public partial class VolumeDisplay : OsnTester.OsnProxy.DeviceDisplay {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsnTester.OsnProxy.StorageVolume VolumeInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsnTester.OsnProxy.StorageVolume VolumeInfo {
            get {
                return this.VolumeInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.VolumeInfoField, value) != true)) {
                    this.VolumeInfoField = value;
                    this.RaisePropertyChanged("VolumeInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TierDisplay", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsnTester.OsnProxy.DiskDisplay))]
    public partial class TierDisplay : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ulong FreeSizeField;
        
        private ulong SizeField;
        
        private OsnTester.OsnProxy.DiskAnchor TierField;
        
        private OsnTester.OsnProxy.UnstableSize[] UnstableSizesField;
        
        private ulong UsedSizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong FreeSize {
            get {
                return this.FreeSizeField;
            }
            set {
                if ((this.FreeSizeField.Equals(value) != true)) {
                    this.FreeSizeField = value;
                    this.RaisePropertyChanged("FreeSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.DiskAnchor Tier {
            get {
                return this.TierField;
            }
            set {
                if ((this.TierField.Equals(value) != true)) {
                    this.TierField = value;
                    this.RaisePropertyChanged("Tier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.UnstableSize[] UnstableSizes {
            get {
                return this.UnstableSizesField;
            }
            set {
                if ((object.ReferenceEquals(this.UnstableSizesField, value) != true)) {
                    this.UnstableSizesField = value;
                    this.RaisePropertyChanged("UnstableSizes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong UsedSize {
            get {
                return this.UsedSizeField;
            }
            set {
                if ((this.UsedSizeField.Equals(value) != true)) {
                    this.UsedSizeField = value;
                    this.RaisePropertyChanged("UsedSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiskDisplay", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class DiskDisplay : OsnTester.OsnProxy.TierDisplay {
        
        private OsnTester.OsnProxy.PoolDisk DiskInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.PoolDisk DiskInfo {
            get {
                return this.DiskInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DiskInfoField, value) != true)) {
                    this.DiskInfoField = value;
                    this.RaisePropertyChanged("DiskInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnstableSize", Namespace="http://schemas.datacontract.org/2004/07/OSNPlatform.Generic")]
    [System.SerializableAttribute()]
    public partial class UnstableSize : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ulong SizeField;
        
        private OsnTester.OsnProxy.DiskAnchor TierField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public OsnTester.OsnProxy.DiskAnchor Tier {
            get {
                return this.TierField;
            }
            set {
                if ((this.TierField.Equals(value) != true)) {
                    this.TierField = value;
                    this.RaisePropertyChanged("Tier");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OsnProxy.IOSNPlatformService")]
    public interface IOSNPlatformService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyStorageMappingItem", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyStorageMappingItemResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyModifyStorageMappingItem(string mappingId, ushort newLun, OsnTester.OsnProxy.MapAuth auth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyStorageMappingItem", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyStorageMappingItemResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyStorageMappingItemAsync(string mappingId, ushort newLun, OsnTester.OsnProxy.MapAuth auth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappingListResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyEnableStorageMappingList(string[] mappingIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappingListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEnableStorageMappingListAsync(string[] mappingIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappingListResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDisableStorageMappingList(string[] mappingIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappingListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDisableStorageMappingListAsync(string[] mappingIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappings", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappingsResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDisableStorageMappings(string servGroupId, string volueGroupId, string clientId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappings", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageMappingsResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDisableStorageMappingsAsync(string servGroupId, string volueGroupId, string clientId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappings", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappingsResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyEnableStorageMappings(string servGroupId, string volueGroupId, string clientId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappings", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageMappingsResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEnableStorageMappingsAsync(string servGroupId, string volueGroupId, string clientId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageMappingListResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteStorageMappingList(string[] mappingIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageMappingListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteStorageMappingListAsync(string[] mappingIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetMappingInfoByVolumeId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetMappingInfoByVolumeIdResponse")]
        OsnTester.OsnProxy.StorageVolume ProxyGetMappingInfoByVolumeId(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetMappingInfoByVolumeId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetMappingInfoByVolumeIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume> ProxyGetMappingInfoByVolumeIdAsync(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryDefaultChannelPair", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryDefaultChannelPairResponse")]
        OsnTester.OsnProxy.ChannelPair ProxyQueryDefaultChannelPair(string tServerId, string iServerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryDefaultChannelPair", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryDefaultChannelPairResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair> ProxyQueryDefaultChannelPairAsync(string tServerId, string iServerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairListResponse")]
        OsnTester.OsnProxy.ChannelPair[] ProxyQueryChannelPairList(string tServerId, string iServerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair[]> ProxyQueryChannelPairListAsync(string tServerId, string iServerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairListEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairListExResponse")]
        OsnTester.OsnProxy.ChannelPair[] ProxyQueryChannelPairListEx(string tServIpAddr, string iServIpAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairListEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryChannelPairListExResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair[]> ProxyQueryChannelPairListExAsync(string tServIpAddr, string iServIpAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetRelatedInternalMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetRelatedInternalMappingListResponse" +
            "")]
        OsnTester.OsnProxy.InternalMapping[] ProxyGetRelatedInternalMappingList(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetRelatedInternalMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetRelatedInternalMappingListResponse" +
            "")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.InternalMapping[]> ProxyGetRelatedInternalMappingListAsync(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroupResponse")]
        OsnTester.OsnProxy.StorageLunMirror[] ProxyGetLunMirrorListUnderGroup(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirror[]> ProxyGetLunMirrorListUnderGroupAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroupEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroupExResponse")]
        OsnTester.OsnProxy.StorageLunMirror[] ProxyGetLunMirrorListUnderGroupEx(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroupEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderGroupExResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirror[]> ProxyGetLunMirrorListUnderGroupExAsync(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetSpecificLunMirrorList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetSpecificLunMirrorListResponse")]
        OsnTester.OsnProxy.StorageLunMirrorEx[] ProxyGetSpecificLunMirrorList(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetSpecificLunMirrorList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetSpecificLunMirrorListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirrorEx[]> ProxyGetSpecificLunMirrorListAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderServer", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderServerResponse")]
        OsnTester.OsnProxy.StorageLunMirrorEx[] ProxyGetLunMirrorListUnderServer(string serverId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderServer", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorListUnderServerResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirrorEx[]> ProxyGetLunMirrorListUnderServerAsync(string serverId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckLunMirrorState", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckLunMirrorStateResponse")]
        bool ProxyCheckLunMirrorState(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckLunMirrorState", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckLunMirrorStateResponse")]
        System.Threading.Tasks.Task<bool> ProxyCheckLunMirrorStateAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirrorResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateStorageLunMirror(string servGroupId, string sourceVolId, string mirrorVolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirrorResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateStorageLunMirrorAsync(string servGroupId, string sourceVolId, string mirrorVolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirrorEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirrorExResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateStorageLunMirrorEx(string servGroupId, string sourceVolId, string mirPoolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirrorEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageLunMirrorExResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateStorageLunMirrorExAsync(string servGroupId, string sourceVolId, string mirPoolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageLunMirrorResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyEnableStorageLunMirror(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEnableStorageLunMirrorResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEnableStorageLunMirrorAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageLunMirrorResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDisableStorageLunMirror(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDisableStorageLunMirrorResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDisableStorageLunMirrorAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyContinueStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyContinueStorageLunMirrorResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyContinueStorageLunMirror(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyContinueStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyContinueStorageLunMirrorResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyContinueStorageLunMirrorAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyPauseStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyPauseStorageLunMirrorResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyPauseStorageLunMirror(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyPauseStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyPauseStorageLunMirrorResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyPauseStorageLunMirrorAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageLunMirrorResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteStorageLunMirror(string servGroupId, string magicId, bool bForceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageLunMirrorResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteStorageLunMirrorAsync(string servGroupId, string magicId, bool bForceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyInitializeStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyInitializeStorageLunMirrorResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyInitializeStorageLunMirror(string servGroupId, string magicId, bool bForceToUp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyInitializeStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyInitializeStorageLunMirrorResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyInitializeStorageLunMirrorAsync(string servGroupId, string magicId, bool bForceToUp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyForceRecoveryStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyForceRecoveryStorageLunMirrorResponse" +
            "")]
        OsnTester.OsnProxy.OSNStatus ProxyForceRecoveryStorageLunMirror(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyForceRecoveryStorageLunMirror", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyForceRecoveryStorageLunMirrorResponse" +
            "")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyForceRecoveryStorageLunMirrorAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorEnlargeRange", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorEnlargeRangeResponse")]
        OsnTester.OsnProxy.EnlargeRange ProxyGetLunMirrorEnlargeRange(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorEnlargeRange", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorEnlargeRangeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.EnlargeRange> ProxyGetLunMirrorEnlargeRangeAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyLunMirrorEnlargeRange", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyLunMirrorEnlargeRangeResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyModifyLunMirrorEnlargeRange(string servGroupId, string magicId, OsnTester.OsnProxy.EnlargeRange midRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyLunMirrorEnlargeRange", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyLunMirrorEnlargeRangeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyLunMirrorEnlargeRangeAsync(string servGroupId, string magicId, OsnTester.OsnProxy.EnlargeRange midRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckSnapshotConsistent", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckSnapshotConsistentResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckSnapshotConsistent(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckSnapshotConsistent", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckSnapshotConsistentResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckSnapshotConsistentAsync(string servGroupId, string magicId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountByPoolIdAndV" +
            "olName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountByPoolIdAndV" +
            "olNameResponse")]
        int ProxySearchOptionalVolumeCountByPoolIdAndVolName(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountByPoolIdAndV" +
            "olName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountByPoolIdAndV" +
            "olNameResponse")]
        System.Threading.Tasks.Task<int> ProxySearchOptionalVolumeCountByPoolIdAndVolNameAsync(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListByPoolIdAndVo" +
            "lName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListByPoolIdAndVo" +
            "lNameResponse")]
        OsnTester.OsnProxy.StorageVolume[] ProxySearchOptionalVolumeListByPoolIdAndVolName(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListByPoolIdAndVo" +
            "lName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListByPoolIdAndVo" +
            "lNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxySearchOptionalVolumeListByPoolIdAndVolNameAsync(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountUnderGroupBy" +
            "VolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountUnderGroupBy" +
            "VolNameResponse")]
        int ProxySearchOptionalVolumeCountUnderGroupByVolName(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountUnderGroupBy" +
            "VolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeCountUnderGroupBy" +
            "VolNameResponse")]
        System.Threading.Tasks.Task<int> ProxySearchOptionalVolumeCountUnderGroupByVolNameAsync(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListUnderGroupByV" +
            "olName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListUnderGroupByV" +
            "olNameResponse")]
        OsnTester.OsnProxy.StorageVolume[] ProxySearchOptionalVolumeListUnderGroupByVolName(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListUnderGroupByV" +
            "olName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchOptionalVolumeListUnderGroupByV" +
            "olNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxySearchOptionalVolumeListUnderGroupByVolNameAsync(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientCountByGroupIdAndC" +
            "lientName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientCountByGroupIdAndC" +
            "lientNameResponse")]
        int ProxySearchStorageClientCountByGroupIdAndClientName(string servGroupId, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientCountByGroupIdAndC" +
            "lientName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientCountByGroupIdAndC" +
            "lientNameResponse")]
        System.Threading.Tasks.Task<int> ProxySearchStorageClientCountByGroupIdAndClientNameAsync(string servGroupId, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientListByGroupIdAndCl" +
            "ientName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientListByGroupIdAndCl" +
            "ientNameResponse")]
        OsnTester.OsnProxy.StorageClient[] ProxySearchStorageClientListByGroupIdAndClientName(string servGroupId, string clientName, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientListByGroupIdAndCl" +
            "ientName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchStorageClientListByGroupIdAndCl" +
            "ientNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageClient[]> ProxySearchStorageClientListByGroupIdAndClientNameAsync(string servGroupId, string clientName, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchPoolCountByServerIdAndPoolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchPoolCountByServerIdAndPoolNameR" +
            "esponse")]
        int ProxySearchPoolCountByServerIdAndPoolName(string serverId, string poolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchPoolCountByServerIdAndPoolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchPoolCountByServerIdAndPoolNameR" +
            "esponse")]
        System.Threading.Tasks.Task<int> ProxySearchPoolCountByServerIdAndPoolNameAsync(string serverId, string poolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchPoolListByServerIdAndPoolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchPoolListByServerIdAndPoolNameRe" +
            "sponse")]
        OsnTester.OsnProxy.StoragePool[] ProxySearchPoolListByServerIdAndPoolName(string serverId, string poolName, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchPoolListByServerIdAndPoolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchPoolListByServerIdAndPoolNameRe" +
            "sponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool[]> ProxySearchPoolListByServerIdAndPoolNameAsync(string serverId, string poolName, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorCountByGroupIdAndVolNa" +
            "me", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorCountByGroupIdAndVolNa" +
            "meResponse")]
        int ProxySearchLunMirrorCountByGroupIdAndVolName(string servGroupId, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorCountByGroupIdAndVolNa" +
            "me", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorCountByGroupIdAndVolNa" +
            "meResponse")]
        System.Threading.Tasks.Task<int> ProxySearchLunMirrorCountByGroupIdAndVolNameAsync(string servGroupId, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorListByGroupIdAndVolNam" +
            "e", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorListByGroupIdAndVolNam" +
            "eResponse")]
        OsnTester.OsnProxy.StorageLunMirror[] ProxySearchLunMirrorListByGroupIdAndVolName(string servGroupId, string volumeName, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorListByGroupIdAndVolNam" +
            "e", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchLunMirrorListByGroupIdAndVolNam" +
            "eResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirror[]> ProxySearchLunMirrorListByGroupIdAndVolNameAsync(string servGroupId, string volumeName, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdResponse")]
        int ProxyReadLogCountByServerGroupId(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdResponse")]
        System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdResponse")]
        OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupId(string groupId, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAsync(string groupId, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "Response")]
        int ProxyReadLogCountByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "Response")]
        System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "e", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "eResponse")]
        OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "e", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "eResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndTimeRes" +
            "ponse")]
        int ProxyReadLogCountByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndTimeRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndTimeRe" +
            "sponse")]
        OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndTimeRe" +
            "sponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "AndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "AndTimeResponse")]
        int ProxyReadLogCountByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "AndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogCountByServerGroupIdAndLogType" +
            "AndTimeResponse")]
        System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "eAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "eAndTimeResponse")]
        OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "eAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadLogDetailByServerGroupIdAndLogTyp" +
            "eAndTimeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteLogByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteLogByServerGroupIdResponse")]
        int ProxyDeleteLogByServerGroupId(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteLogByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteLogByServerGroupIdResponse")]
        System.Threading.Tasks.Task<int> ProxyDeleteLogByServerGroupIdAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteAlarmLogByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteAlarmLogByServerGroupIdResponse" +
            "")]
        int ProxyDeleteAlarmLogByServerGroupId(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteAlarmLogByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteAlarmLogByServerGroupIdResponse" +
            "")]
        System.Threading.Tasks.Task<int> ProxyDeleteAlarmLogByServerGroupIdAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdRespo" +
            "nse")]
        int ProxyReadAlarmLogCountByServerGroupId(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdResp" +
            "onse")]
        OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupId(string groupId, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdResp" +
            "onse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAsync(string groupId, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gType", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gTypeResponse")]
        int ProxyReadAlarmLogCountByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gType", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gTypeResponse")]
        System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogType", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogTypeResponse")]
        OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogType", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogTypeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndTi" +
            "me", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndTi" +
            "meResponse")]
        int ProxyReadAlarmLogCountByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndTi" +
            "me", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndTi" +
            "meResponse")]
        System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndT" +
            "ime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndT" +
            "imeResponse")]
        OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndT" +
            "ime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndT" +
            "imeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gTypeAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gTypeAndTimeResponse")]
        int ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gTypeAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogCountByServerGroupIdAndLo" +
            "gTypeAndTimeResponse")]
        System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogTypeAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogTypeAndTimeResponse")]
        OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogTypeAndTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReadAlarmLogDetailByServerGroupIdAndL" +
            "ogTypeAndTimeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyMakeCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyMakeCDPSettingResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyMakeCDPSetting(string servGroupId, string volumeId, string poolId, uint unitSize, ulong initSize, uint increment, ulong MaxSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyMakeCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyMakeCDPSettingResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyMakeCDPSettingAsync(string servGroupId, string volumeId, string poolId, uint unitSize, ulong initSize, uint increment, ulong MaxSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyCDPSettingResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyModifyCDPSetting(string groupId, string volumeId, uint increment, ulong MaxSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyCDPSettingResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyCDPSettingAsync(string groupId, string volumeId, uint increment, ulong MaxSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSettingResponse")]
        OsnTester.OsnProxy.OSNCDPSetting ProxyGetCDPSetting(string groupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSettingResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNCDPSetting> ProxyGetCDPSettingAsync(string groupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveCDPSettingResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRemoveCDPSetting(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveCDPSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveCDPSettingResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveCDPSettingAsync(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalAgentCDP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalAgentCDPResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateNormalAgentCDP(string servGroupId, string volumeId, string volumaName, string clientId, string bufVolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalAgentCDP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalAgentCDPResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateNormalAgentCDPAsync(string servGroupId, string volumeId, string volumaName, string clientId, string bufVolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalCDP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalCDPResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateNormalCDP(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalCDP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateNormalCDPResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateNormalCDPAsync(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteCDP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteCDPResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteCDP(string servGroupId, string volumeId, long snapshotTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteCDP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteCDPResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteCDPAsync(string servGroupId, string volumeId, long snapshotTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCdpSnapshotDetailInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCdpSnapshotDetailInfoResponse")]
        OsnTester.OsnProxy.CDPSnapshotDetailInfo[] ProxyGetCdpSnapshotDetailInfo(string servGroupId, string volId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCdpSnapshotDetailInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCdpSnapshotDetailInfoResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.CDPSnapshotDetailInfo[]> ProxyGetCdpSnapshotDetailInfoAsync(string servGroupId, string volId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoListResponse")]
        OsnTester.OsnProxy.OSNCDPInfo[] ProxyGetCDPInfoList(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNCDPInfo[]> ProxyGetCDPInfoListAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySetCDPBufferDefaultSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySetCDPBufferDefaultSettingResponse")]
        OsnTester.OsnProxy.OSNStatus ProxySetCDPBufferDefaultSetting(string servGroupId, uint unitSize, uint increment, ulong MaxSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySetCDPBufferDefaultSetting", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySetCDPBufferDefaultSettingResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySetCDPBufferDefaultSettingAsync(string servGroupId, uint unitSize, uint increment, ulong MaxSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRestoreCDPSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRestoreCDPSnapshotResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRestoreCDPSnapshot(string groupId, string volumeId, long snapshotTime, string tgtVolumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRestoreCDPSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRestoreCDPSnapshotResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRestoreCDPSnapshotAsync(string groupId, string volumeId, long snapshotTime, string tgtVolumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteSnapshotResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteSnapshot(string groupId, string volumeId, string tgtVolumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteSnapshotResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteSnapshotAsync(string groupId, string volumeId, string tgtVolumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyLoopBackCDPSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyLoopBackCDPSnapshotResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyLoopBackCDPSnapshot(string groupId, string volumeId, long snapshotTime, string tcwwn, string icwwn, OsnTester.OsnProxy.MapAuth auth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyLoopBackCDPSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyLoopBackCDPSnapshotResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyLoopBackCDPSnapshotAsync(string groupId, string volumeId, long snapshotTime, string tcwwn, string icwwn, OsnTester.OsnProxy.MapAuth auth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnLoopBackCDPSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnLoopBackCDPSnapshotResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyUnLoopBackCDPSnapshot(string groupId, string volumeId, long snapshotTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnLoopBackCDPSnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnLoopBackCDPSnapshotResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnLoopBackCDPSnapshotAsync(string groupId, string volumeId, long snapshotTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCISnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCISnapshotResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCISnapshot(string groupId, string volumeId, string tgtVolumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCISnapshot", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCISnapshotResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCISnapshotAsync(string groupId, string volumeId, string tgtVolumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyPageCDPSnapshotDetailInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyPageCDPSnapshotDetailInfoResponse")]
        OsnTester.OsnProxy.PageCDPSnapshotInfo ProxyPageCDPSnapshotDetailInfo(string groupId, string volId, int offset, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyPageCDPSnapshotDetailInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyPageCDPSnapshotDetailInfoResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.PageCDPSnapshotInfo> ProxyPageCDPSnapshotDetailInfoAsync(string groupId, string volId, int offset, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoByVolumeName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoByVolumeNameResponse")]
        OsnTester.OsnProxy.OSNCDPInfo ProxyGetCDPInfoByVolumeName(string groupId, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoByVolumeName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPInfoByVolumeNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNCDPInfo> ProxyGetCDPInfoByVolumeNameAsync(string groupId, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSnapshotByTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSnapshotByTimeResponse")]
        OsnTester.OsnProxy.CDPSnapshotDetailInfo ProxyGetCDPSnapshotByTime(string groupId, string volId, long snapshotTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSnapshotByTime", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPSnapshotByTimeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.CDPSnapshotDetailInfo> ProxyGetCDPSnapshotByTimeAsync(string groupId, string volId, long snapshotTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyPageCDPInfoList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyPageCDPInfoListResponse")]
        OsnTester.OsnProxy.PageCDPInfo ProxyPageCDPInfoList(string groupId, int offset, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyPageCDPInfoList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyPageCDPInfoListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.PageCDPInfo> ProxyPageCDPInfoListAsync(string groupId, int offset, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchCDPInfoList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchCDPInfoListResponse")]
        OsnTester.OsnProxy.PageCDPInfo ProxySearchCDPInfoList(string groupId, int offset, int pagesize, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchCDPInfoList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchCDPInfoListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.PageCDPInfo> ProxySearchCDPInfoListAsync(string groupId, int offset, int pagesize, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLoopBackTargetChannelListByInitiat" +
            "orChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLoopBackTargetChannelListByInitiat" +
            "orChannelResponse")]
        OsnTester.OsnProxy.TargetChannel[] ProxyGetLoopBackTargetChannelListByInitiatorChannel(string groupId, string volumeId, string iChannelWWN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLoopBackTargetChannelListByInitiat" +
            "orChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLoopBackTargetChannelListByInitiat" +
            "orChannelResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.TargetChannel[]> ProxyGetLoopBackTargetChannelListByInitiatorChannelAsync(string groupId, string volumeId, string iChannelWWN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateSchedule", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateSchedule(string goupId, OsnTester.OsnProxy.OSNSchedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateSchedule", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateScheduleAsync(string goupId, OsnTester.OsnProxy.OSNSchedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQuerySchedule", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryScheduleResponse")]
        OsnTester.OsnProxy.OSNSchedule ProxyQuerySchedule(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQuerySchedule", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryScheduleResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyQueryScheduleAsync(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteSchedule", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteScheduleResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteSchedule(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteSchedule", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteScheduleResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteScheduleAsync(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetScheduleTemplateByName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetScheduleTemplateByNameResponse")]
        OsnTester.OsnProxy.OSNSchedule ProxyGetScheduleTemplateByName(string groupId, string templateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetScheduleTemplateByName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetScheduleTemplateByNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyGetScheduleTemplateByNameAsync(string groupId, string templateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPScheduleTemplateList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPScheduleTemplateListResponse")]
        OsnTester.OsnProxy.OSNSchedule[] ProxyGetCDPScheduleTemplateList(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPScheduleTemplateList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPScheduleTemplateListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule[]> ProxyGetCDPScheduleTemplateListAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorScheduleTemplateList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorScheduleTemplateListRespo" +
            "nse")]
        OsnTester.OsnProxy.OSNSchedule[] ProxyGetLunMirrorScheduleTemplateList(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorScheduleTemplateList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetLunMirrorScheduleTemplateListRespo" +
            "nse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule[]> ProxyGetLunMirrorScheduleTemplateListAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteScheduleTemplateResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteScheduleTemplate(string groupId, string templateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteScheduleTemplateResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteScheduleTemplateAsync(string groupId, string templateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleTemplateResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateScheduleTemplate(string groupId, OsnTester.OsnProxy.OSNSchedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleTemplateResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateScheduleTemplateAsync(string groupId, OsnTester.OsnProxy.OSNSchedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEditScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEditScheduleTemplateResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyEditScheduleTemplate(string groupId, OsnTester.OsnProxy.OSNSchedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyEditScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyEditScheduleTemplateResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEditScheduleTemplateAsync(string groupId, OsnTester.OsnProxy.OSNSchedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleByTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleByTemplateResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateScheduleByTemplate(string groupId, string TemplateName, OsnTester.OsnProxy.ScheduleTarget scheduleTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleByTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateScheduleByTemplateResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateScheduleByTemplateAsync(string groupId, string TemplateName, OsnTester.OsnProxy.ScheduleTarget scheduleTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultLunMirrorScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultLunMirrorScheduleTemplateRe" +
            "sponse")]
        OsnTester.OsnProxy.OSNSchedule ProxyGetDefaultLunMirrorScheduleTemplate(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultLunMirrorScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultLunMirrorScheduleTemplateRe" +
            "sponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyGetDefaultLunMirrorScheduleTemplateAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultCDPScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultCDPScheduleTemplateResponse" +
            "")]
        OsnTester.OsnProxy.OSNSchedule ProxyGetDefaultCDPScheduleTemplate(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultCDPScheduleTemplate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetDefaultCDPScheduleTemplateResponse" +
            "")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyGetDefaultCDPScheduleTemplateAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskInfoResponse")]
        OsnTester.OsnProxy.OSNDiskInfo ProxyGetPhysicalDiskInfo(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskInfoResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNDiskInfo> ProxyGetPhysicalDiskInfoAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVirtualDiskPerformance", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVirtualDiskPerformanceResponse")]
        OsnTester.OsnProxy.Performance[] ProxyGetVirtualDiskPerformance(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVirtualDiskPerformance", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVirtualDiskPerformanceResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.Performance[]> ProxyGetVirtualDiskPerformanceAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskPerformance", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskPerformanceResponse")]
        OsnTester.OsnProxy.Performance[] ProxyGetPhysicalDiskPerformance(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskPerformance", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPhysicalDiskPerformanceResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.Performance[]> ProxyGetPhysicalDiskPerformanceAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySetPhysicalDiskPerformanceConfig", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySetPhysicalDiskPerformanceConfigRespo" +
            "nse")]
        int ProxySetPhysicalDiskPerformanceConfig(string groupId, bool isEnable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySetPhysicalDiskPerformanceConfig", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySetPhysicalDiskPerformanceConfigRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> ProxySetPhysicalDiskPerformanceConfigAsync(string groupId, bool isEnable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckIpmiStatusByIP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckIpmiStatusByIPResponse")]
        OsnTester.OsnProxy.IpmiStatus[] ProxyCheckIpmiStatusByIP(string servIpAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckIpmiStatusByIP", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckIpmiStatusByIPResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.IpmiStatus[]> ProxyCheckIpmiStatusByIPAsync(string servIpAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyValidateIPMIConfig", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyValidateIPMIConfigResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyValidateIPMIConfig(string servIpAddr, string ipmiIp, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyValidateIPMIConfig", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyValidateIPMIConfigResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyValidateIPMIConfigAsync(string servIpAddr, string ipmiIp, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUpdateIPMIConfig", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUpdateIPMIConfigResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyUpdateIPMIConfig(string serverId, string ipmiIp, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUpdateIPMIConfig", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUpdateIPMIConfigResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUpdateIPMIConfigAsync(string serverId, string ipmiIp, string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyValidateLogin", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyValidateLoginResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyValidateLogin(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyValidateLogin", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyValidateLoginResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyValidateLoginAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateAccount", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateAccountResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateAccount(string user, OsnTester.OsnProxy.UserRole role, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateAccount", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateAccountResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateAccountAsync(string user, OsnTester.OsnProxy.UserRole role, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyPassword", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyPasswordResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyModifyPassword(string user, string newpwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyPassword", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyPasswordResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyPasswordAsync(string user, string newpwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteAccount", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteAccountResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteAccount(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteAccount", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteAccountResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteAccountAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAccountList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAccountListResponse")]
        OsnTester.OsnProxy.OSNUser[] ProxyGetAccountList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAccountList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAccountListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNUser[]> ProxyGetAccountListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateServerGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateServerGroup(string servGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateServerGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateServerGroupAsync(string servGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckServerGroupName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckServerGroupNameResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckServerGroupName(string servGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckServerGroupName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckServerGroupNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckServerGroupNameAsync(string servGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameServerGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRenameServerGroup(string servGroupId, string newGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameServerGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameServerGroupAsync(string servGroupId, string newGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupByIdResponse")]
        OsnTester.OsnProxy.OSNGroup ProxyGetServerGroupById(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupByIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNGroup> ProxyGetServerGroupByIdAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupListResponse")]
        OsnTester.OsnProxy.OSNGroup[] ProxyGetServerGroupList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNGroup[]> ProxyGetServerGroupListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedDeleteServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedDeleteServerGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyIsAllowedDeleteServerGroup(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedDeleteServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedDeleteServerGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsAllowedDeleteServerGroupAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteServerGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteServerGroup(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteServerGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteServerGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteServerGroupAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryMaximumOfServerInGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryMaximumOfServerInGroupResponse")]
        int ProxyQueryMaximumOfServerInGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryMaximumOfServerInGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryMaximumOfServerInGroupResponse")]
        System.Threading.Tasks.Task<int> ProxyQueryMaximumOfServerInGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddServerToGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddServerToGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyAddServerToGroup(string servGroupId, string servIpAddr, string servAlias, bool primaryFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddServerToGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddServerToGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddServerToGroupAsync(string servGroupId, string servIpAddr, string servAlias, bool primaryFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyVerifyServerAddress", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyVerifyServerAddressResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyVerifyServerAddress(string servIpAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyVerifyServerAddress", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyVerifyServerAddressResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyVerifyServerAddressAsync(string servIpAddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckServerAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckServerAliasResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckServerAlias(string servAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckServerAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckServerAliasResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckServerAliasAsync(string servAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameServerAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameServerAliasResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRenameServerAlias(string serverId, string newServAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameServerAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameServerAliasResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameServerAliasAsync(string serverId, string newServAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySwitchServerToMaster", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySwitchServerToMasterResponse")]
        OsnTester.OsnProxy.OSNStatus ProxySwitchServerToMaster(string serverId, bool bForceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySwitchServerToMaster", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySwitchServerToMasterResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySwitchServerToMasterAsync(string serverId, bool bForceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerByIdResponse")]
        OsnTester.OsnProxy.OSNServer ProxyGetServerById(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerByIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNServer> ProxyGetServerByIdAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerListByGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerListByGroupIdResponse")]
        OsnTester.OsnProxy.OSNServer[] ProxyGetServerListByGroupId(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerListByGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerListByGroupIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNServer[]> ProxyGetServerListByGroupIdAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedRemoveServer", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedRemoveServerResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyIsAllowedRemoveServer(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedRemoveServer", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsAllowedRemoveServerResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsAllowedRemoveServerAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveServerFromGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveServerFromGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRemoveServerFromGroup(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveServerFromGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveServerFromGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveServerFromGroupAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsMasterServer", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsMasterServerResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyIsMasterServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsMasterServer", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsMasterServerResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsMasterServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerLicence", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerLicenceResponse")]
        OsnTester.OsnProxy.LicenseAuth ProxyGetServerLicence(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerLicence", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerLicenceResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.LicenseAuth> ProxyGetServerLicenceAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupLicence", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupLicenceResponse")]
        OsnTester.OsnProxy.LicenseAuth ProxyGetServerGroupLicence(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupLicence", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerGroupLicenceResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.LicenseAuth> ProxyGetServerGroupLicenceAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerSystemInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerSystemInfoResponse")]
        OsnTester.OsnProxy.OSNSystem ProxyGetServerSystemInfo(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetServerSystemInfo", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetServerSystemInfoResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSystem> ProxyGetServerSystemInfoAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupRoleResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyUpdateGroupRole(string curGroupId, OsnTester.OsnProxy.GroupRole role, string remoteGroupId, OsnTester.OsnProxy.GroupRole remoteRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupRoleResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUpdateGroupRoleAsync(string curGroupId, OsnTester.OsnProxy.GroupRole role, string remoteGroupId, OsnTester.OsnProxy.GroupRole remoteRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetGroupRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetGroupRoleResponse")]
        OsnTester.OsnProxy.GroupRole ProxyGetGroupRole(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetGroupRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetGroupRoleResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.GroupRole> ProxyGetGroupRoleAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySetGroupsRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySetGroupsRoleResponse")]
        OsnTester.OsnProxy.OSNStatus ProxySetGroupsRole(string curGroupId, OsnTester.OsnProxy.GroupRole role, OsnTester.OsnProxy.OSNGroup remoteG, OsnTester.OsnProxy.GroupRole remoteRole, string remoteIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySetGroupsRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySetGroupsRoleResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySetGroupsRoleAsync(string curGroupId, OsnTester.OsnProxy.GroupRole role, OsnTester.OsnProxy.OSNGroup remoteG, OsnTester.OsnProxy.GroupRole remoteRole, string remoteIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnsetGroupRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnsetGroupRoleResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyUnsetGroupRole(string curGroupId, string remoteGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnsetGroupRole", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnsetGroupRoleResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnsetGroupRoleAsync(string curGroupId, string remoteGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupState", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupStateResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyUpdateGroupState(string curGroupId, OsnTester.OsnProxy.SwitchState state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupState", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUpdateGroupStateResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUpdateGroupStateAsync(string curGroupId, OsnTester.OsnProxy.SwitchState state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerIdResponse")]
        OsnTester.OsnProxy.StoragePool[] ProxyGetPoolListByServerId(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool[]> ProxyGetPoolListByServerIdAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolNameById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolNameByIdResponse")]
        string ProxyGetPoolNameById(string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolNameById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolNameByIdResponse")]
        System.Threading.Tasks.Task<string> ProxyGetPoolNameByIdAsync(string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolByIdResponse")]
        OsnTester.OsnProxy.StoragePool ProxyGetPoolById(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolByIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool> ProxyGetPoolByIdAsync(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreatePool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreatePoolResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreatePool(string serverId, string poolName, OsnTester.OsnProxy.PoolStyle category, OsnTester.OsnProxy.RedundanceLevel ftLevel, uint unitSize, bool ptFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreatePool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreatePoolResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreatePoolAsync(string serverId, string poolName, OsnTester.OsnProxy.PoolStyle category, OsnTester.OsnProxy.RedundanceLevel ftLevel, uint unitSize, bool ptFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckPoolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckPoolNameResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckPoolName(string poolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckPoolName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckPoolNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckPoolNameAsync(string poolName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsPoolMultiShared", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsPoolMultiSharedResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyIsPoolMultiShared(string servGroupId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyIsPoolMultiShared", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyIsPoolMultiSharedResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsPoolMultiSharedAsync(string servGroupId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeletePool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeletePoolResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeletePool(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeletePool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeletePoolResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeletePoolAsync(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReloadPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReloadPoolResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyReloadPool(string serverId, string[] poolIdList, bool forceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReloadPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReloadPoolResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyReloadPoolAsync(string serverId, string[] poolIdList, bool forceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryPoolAttribute", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryPoolAttributeResponse")]
        OsnTester.OsnProxy.StorageAttribute ProxyQueryPoolAttribute(string serverId, string poolId, bool bRefresh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryPoolAttribute", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryPoolAttributeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageAttribute> ProxyQueryPoolAttributeAsync(string serverId, string poolId, bool bRefresh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByPoolIdResponse")]
        OsnTester.OsnProxy.OSNStatus ProxySwitchStorageModeByPoolId(string servGroupId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByPoolIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySwitchStorageModeByPoolIdAsync(string servGroupId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolCountByServerId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolCountByServerIdResponse")]
        int ProxyGetPoolCountByServerId(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolCountByServerId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolCountByServerIdResponse")]
        System.Threading.Tasks.Task<int> ProxyGetPoolCountByServerIdAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerIdEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerIdExResponse")]
        OsnTester.OsnProxy.StoragePool[] ProxyGetPoolListByServerIdEx(string serverId, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerIdEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolListByServerIdExResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool[]> ProxyGetPoolListByServerIdExAsync(string serverId, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRescanDiskDrive", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRescanDiskDriveResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRescanDiskDrive(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRescanDiskDrive", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRescanDiskDriveResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRescanDiskDriveAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableDiskList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableDiskListResponse")]
        OsnTester.OsnProxy.DiskDrive[] ProxyGetAvailableDiskList(string serverId, bool tFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableDiskList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableDiskListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.DiskDrive[]> ProxyGetAvailableDiskListAsync(string serverId, bool tFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetDiskDriveList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetDiskDriveListResponse")]
        OsnTester.OsnProxy.PoolDisk[] ProxyGetDiskDriveList(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetDiskDriveList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetDiskDriveListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.PoolDisk[]> ProxyGetDiskDriveListAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskListResponse")]
        OsnTester.OsnProxy.PoolDisk[] ProxyGetPoolDiskList(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.PoolDisk[]> ProxyGetPoolDiskListAsync(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddDiskToPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddDiskToPoolResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyAddDiskToPool(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddDiskToPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddDiskToPoolResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddDiskToPoolAsync(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveDiskFromPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveDiskFromPoolResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRemoveDiskFromPool(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveDiskFromPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveDiskFromPoolResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveDiskFromPoolAsync(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateVolumeGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateVolumeGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateVolumeGroup(string groupId, string volumeGroupName, string[] volumeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateVolumeGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateVolumeGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateVolumeGroupAsync(string groupId, string volumeGroupName, string[] volumeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolumeGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolumeGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteVolumeGroup(string groupId, string volumeGroupId, bool removeVolumes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolumeGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolumeGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteVolumeGroupAsync(string groupId, string volumeGroupId, bool removeVolumes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddVolumesToGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddVolumesToGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyAddVolumesToGroup(string groupId, string volumeGroupId, string[] volumeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddVolumesToGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddVolumesToGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddVolumesToGroupAsync(string groupId, string volumeGroupId, string[] volumeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveVolumesFromGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveVolumesFromGroupResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRemoveVolumesFromGroup(string groupId, string volumeGroupId, string[] volumeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveVolumesFromGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveVolumesFromGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveVolumesFromGroupAsync(string groupId, string volumeGroupId, string[] volumeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroupResponse")]
        OsnTester.OsnProxy.VolumeGroup ProxyGetVolumeGroup(string groupId, string volumeGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroupResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.VolumeGroup> ProxyGetVolumeGroupAsync(string groupId, string volumeGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroups", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroupsResponse")]
        OsnTester.OsnProxy.VolumeGroup[] ProxyGetVolumeGroups(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroups", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeGroupsResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.VolumeGroup[]> ProxyGetVolumeGroupsAsync(string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeGroupName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeGroupNameResponse")]
        bool ProxyCheckVolumeGroupName(string volumeGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeGroupName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeGroupNameResponse")]
        System.Threading.Tasks.Task<bool> ProxyCheckVolumeGroupNameAsync(string volumeGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateGroupCDPSnapResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateGroupCDPSnap(string groupId, string volumeGroupId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateGroupCDPSnapResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateGroupCDPSnapAsync(string groupId, string volumeGroupId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteGroupCDPSnapResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteGroupCDPSnap(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteGroupCDPSnapResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteGroupCDPSnapAsync(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRestoreGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRestoreGroupCDPSnapResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRestoreGroupCDPSnap(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRestoreGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRestoreGroupCDPSnapResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRestoreGroupCDPSnapAsync(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetGroupCDPMirroPair", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetGroupCDPMirroPairResponse")]
        OsnTester.OsnProxy.StringsPair[] ProxyGetGroupCDPMirroPair(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetGroupCDPMirroPair", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetGroupCDPMirroPairResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StringsPair[]> ProxyGetGroupCDPMirroPairAsync(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnrestoreGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnrestoreGroupCDPSnapResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyUnrestoreGroupCDPSnap(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnrestoreGroupCDPSnap", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnrestoreGroupCDPSnapResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnrestoreGroupCDPSnapAsync(string groupId, string volumeGroupId, string label, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableGroupCDPSnaps", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableGroupCDPSnapsResponse")]
        string[] ProxyGetAvailableGroupCDPSnaps(string groupId, string volumeGroupId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableGroupCDPSnaps", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAvailableGroupCDPSnapsResponse")]
        System.Threading.Tasks.Task<string[]> ProxyGetAvailableGroupCDPSnapsAsync(string groupId, string volumeGroupId, bool isVolume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeListByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeListByPoolIdResponse")]
        OsnTester.OsnProxy.StorageVolume[] ProxyGetVolumeListByPoolId(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeListByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeListByPoolIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetVolumeListByPoolIdAsync(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRefreshVolumeListByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRefreshVolumeListByPoolIdResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRefreshVolumeListByPoolId(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRefreshVolumeListByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRefreshVolumeListByPoolIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRefreshVolumeListByPoolIdAsync(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateVolumeResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateVolume(string serverId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateVolumeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateVolumeAsync(string serverId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateVolumeResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyBatchCreateVolume(string serverId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateVolumeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyBatchCreateVolumeAsync(string serverId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateDualPortVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateDualPortVolumeResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateDualPortVolume(string servGroupId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateDualPortVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateDualPortVolumeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateDualPortVolumeAsync(string servGroupId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateDualPortVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateDualPortVolumeResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyBatchCreateDualPortVolume(string servGroupId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateDualPortVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyBatchCreateDualPortVolumeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyBatchCreateDualPortVolumeAsync(string servGroupId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeAttribute", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeAttributeResponse")]
        OsnTester.OsnProxy.StorageAttribute ProxyQueryVolumeAttribute(string serverId, string volumeId, bool bRefresh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeAttribute", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeAttributeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageAttribute> ProxyQueryVolumeAttributeAsync(string serverId, string volumeId, bool bRefresh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByVolumeId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByVolumeIdResponse")]
        OsnTester.OsnProxy.OSNStatus ProxySwitchStorageModeByVolumeId(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByVolumeId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySwitchStorageModeByVolumeIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySwitchStorageModeByVolumeIdAsync(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeNameResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckVolumeName(string[] volNameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckVolumeNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckVolumeNameAsync(string[] volNameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolumeResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteVolume(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteVolumeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteVolumeAsync(string servGroupId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeNameById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeNameByIdResponse")]
        string ProxyGetVolumeNameById(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeNameById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeNameByIdResponse")]
        System.Threading.Tasks.Task<string> ProxyGetVolumeNameByIdAsync(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeByIdResponse")]
        OsnTester.OsnProxy.StorageVolume ProxyQueryVolumeById(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryVolumeByIdResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume> ProxyQueryVolumeByIdAsync(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchCDPSettingVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchCDPSettingVolumeResponse")]
        OsnTester.OsnProxy.StorageVolume[] ProxySearchCDPSettingVolume(string servGroupId, int offset, int pagesize, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchCDPSettingVolume", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchCDPSettingVolumeResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxySearchCDPSettingVolumeAsync(string servGroupId, int offset, int pagesize, string volumeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPPageVolumeListUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPPageVolumeListUnderGroupRespons" +
            "e")]
        OsnTester.OsnProxy.StorageVolume[] ProxyGetCDPPageVolumeListUnderGroup(string servGroupId, int offset, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetCDPPageVolumeListUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetCDPPageVolumeListUnderGroupRespons" +
            "e")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetCDPPageVolumeListUnderGroupAsync(string servGroupId, int offset, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPolicies", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPoliciesResponse")]
        OsnTester.OsnProxy.ASTPolicy[] ProxyGetASTPolicies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPolicies", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPoliciesResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPolicy[]> ProxyGetASTPoliciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPolicy", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPolicyResponse")]
        OsnTester.OsnProxy.ASTPolicy ProxyGetASTPolicy(string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPolicy", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPolicyResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPolicy> ProxyGetASTPolicyAsync(string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateASTPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateASTPoolResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateASTPool(string serverId, string poolName, uint unitSize, string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateASTPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateASTPoolResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateASTPoolAsync(string serverId, string poolName, uint unitSize, string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPoolResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteASTPool(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPool", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPoolResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteASTPoolAsync(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyASTPolicy", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyASTPolicyResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyModifyASTPolicy(string poolId, string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyModifyASTPolicy", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyModifyASTPolicyResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyASTPolicyAsync(string poolId, string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPattern", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPatternResponse")]
        OsnTester.OsnProxy.ASTPattern ProxyGetASTPattern(string modeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPattern", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPatternResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPattern> ProxyGetASTPatternAsync(string modeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPatterns", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPatternsResponse")]
        OsnTester.OsnProxy.ASTPattern[] ProxyGetASTPatterns();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetASTPatterns", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetASTPatternsResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPattern[]> ProxyGetASTPatternsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCustomizeASTPattern", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCustomizeASTPatternResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCustomizeASTPattern(OsnTester.OsnProxy.ASTPattern pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCustomizeASTPattern", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCustomizeASTPatternResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCustomizeASTPatternAsync(OsnTester.OsnProxy.ASTPattern pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPattern", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPatternResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteASTPattern(string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPattern", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteASTPatternResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteASTPatternAsync(string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckModeName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckModeNameResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckModeName(string modeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckModeName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckModeNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckModeNameAsync(string modeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDisplayResponse")]
        OsnTester.OsnProxy.DeviceDisplay ProxyGetPoolDisplay(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDisplayResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.DeviceDisplay> ProxyGetPoolDisplayAsync(string serverId, string poolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDisplayResponse")]
        OsnTester.OsnProxy.DeviceDisplay ProxyGetVolumeDisplay(string serverId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDisplayResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.DeviceDisplay> ProxyGetVolumeDisplayAsync(string serverId, string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskDisplayResponse")]
        OsnTester.OsnProxy.DiskDisplay[] ProxyGetPoolDiskDisplay(string serverId, string poolId, OsnTester.OsnProxy.DiskAnchor tier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetPoolDiskDisplayResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.DiskDisplay[]> ProxyGetPoolDiskDisplayAsync(string serverId, string poolId, OsnTester.OsnProxy.DiskAnchor tier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDiskDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDiskDisplayResponse")]
        OsnTester.OsnProxy.DiskDisplay[] ProxyGetVolumeDiskDisplay(string serverId, string volumeId, OsnTester.OsnProxy.DiskAnchor tier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDiskDisplay", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetVolumeDiskDisplayResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.DiskDisplay[]> ProxyGetVolumeDiskDisplayAsync(string serverId, string volumeId, OsnTester.OsnProxy.DiskAnchor tier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyManualMigrate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyManualMigrateResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyManualMigrate(string volumeId, OsnTester.OsnProxy.DiskAnchor targetTier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyManualMigrate", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyManualMigrateResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyManualMigrateAsync(string volumeId, OsnTester.OsnProxy.DiskAnchor targetTier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroupRespon" +
            "se")]
        OsnTester.OsnProxy.StorageVolume[] ProxyGetOptionalVolumeListUnderGroup(string servGroupId, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroupRespon" +
            "se")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetOptionalVolumeListUnderGroupAsync(string servGroupId, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountUnderGroupRespo" +
            "nse")]
        int ProxyGetOptionalVolumeCountUnderGroup(string servGroupId, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountUnderGroup", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountUnderGroupRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> ProxyGetOptionalVolumeCountUnderGroupAsync(string servGroupId, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroupEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroupExResp" +
            "onse")]
        OsnTester.OsnProxy.StorageVolume[] ProxyGetOptionalVolumeListUnderGroupEx(string servGroupId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroupEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListUnderGroupExResp" +
            "onse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetOptionalVolumeListUnderGroupExAsync(string servGroupId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountByPoolIdRespons" +
            "e")]
        int ProxyGetOptionalVolumeCountByPoolId(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeCountByPoolIdRespons" +
            "e")]
        System.Threading.Tasks.Task<int> ProxyGetOptionalVolumeCountByPoolIdAsync(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListByPoolIdResponse" +
            "")]
        OsnTester.OsnProxy.StorageVolume[] ProxyGetOptionalVolumeListByPoolId(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListByPoolId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalVolumeListByPoolIdResponse" +
            "")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetOptionalVolumeListByPoolIdAsync(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetTargetChannelList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetTargetChannelListResponse")]
        OsnTester.OsnProxy.TargetChannel[] ProxyGetTargetChannelList(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetTargetChannelList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetTargetChannelListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.TargetChannel[]> ProxyGetTargetChannelListAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReloadTargetChannelList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReloadTargetChannelListResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyReloadTargetChannelList(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReloadTargetChannelList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReloadTargetChannelListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyReloadTargetChannelListAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReloadServerChannelList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReloadServerChannelListResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyReloadServerChannelList(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyReloadServerChannelList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyReloadServerChannelListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyReloadServerChannelListAsync(string serverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyMakeDefaultServerChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyMakeDefaultServerChannelResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyMakeDefaultServerChannel(OsnTester.OsnProxy.ChannelPair[] cpArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyMakeDefaultServerChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyMakeDefaultServerChannelResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyMakeDefaultServerChannelAsync(OsnTester.OsnProxy.ChannelPair[] cpArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveTargetChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveTargetChannelResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRemoveTargetChannel(string serverId, string wwn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveTargetChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveTargetChannelResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveTargetChannelAsync(string serverId, string wwn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckTargetChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckTargetChannelAliasResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckTargetChannelAlias(string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckTargetChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckTargetChannelAliasResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckTargetChannelAliasAsync(string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameTargetChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameTargetChannelAliasResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRenameTargetChannelAlias(string serverId, string wwn, string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameTargetChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameTargetChannelAliasResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameTargetChannelAliasAsync(string serverId, string wwn, string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupIdResponse" +
            "")]
        OsnTester.OsnProxy.StorageClient[] ProxyGetStorageClientListByGroupId(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupIdResponse" +
            "")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageClient[]> ProxyGetStorageClientListByGroupIdAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageClientResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCreateStorageClient(string servGroupId, string clientName, string clientIp, OsnTester.OsnProxy.OSType system);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCreateStorageClientResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateStorageClientAsync(string servGroupId, string clientName, string clientIp, OsnTester.OsnProxy.OSType system);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientNameById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientNameByIdResponse")]
        string ProxyGetStorageClientNameById(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientNameById", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientNameByIdResponse")]
        System.Threading.Tasks.Task<string> ProxyGetStorageClientNameByIdAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientNameResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckStorageClientName(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientName", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientNameResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckStorageClientNameAsync(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientAddress", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientAddressResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckStorageClientAddress(string servGroupId, string clientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientAddress", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckStorageClientAddressResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckStorageClientAddressAsync(string servGroupId, string clientIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageClientResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyDeleteStorageClient(string servGroupId, string clientId, bool bForceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyDeleteStorageClientResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteStorageClientAsync(string servGroupId, string clientId, bool bForceFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientCountByGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientCountByGroupIdRespons" +
            "e")]
        int ProxyGetStorageClientCountByGroupId(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientCountByGroupId", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientCountByGroupIdRespons" +
            "e")]
        System.Threading.Tasks.Task<int> ProxyGetStorageClientCountByGroupIdAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupIdEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupIdExRespon" +
            "se")]
        OsnTester.OsnProxy.StorageClient[] ProxyGetStorageClientListByGroupIdEx(string servGroupId, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupIdEx", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageClientListByGroupIdExRespon" +
            "se")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageClient[]> ProxyGetStorageClientListByGroupIdExAsync(string servGroupId, int readoffset, int perpageNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalInitiatorPortList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalInitiatorPortListResponse")]
        OsnTester.OsnProxy.InitiatorChannel[] ProxyGetOptionalInitiatorPortList(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalInitiatorPortList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetOptionalInitiatorPortListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.InitiatorChannel[]> ProxyGetOptionalInitiatorPortListAsync(string servGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderTarget", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderTargetRes" +
            "ponse")]
        OsnTester.OsnProxy.InitiatorChannel[] ProxyGetInitiatorChannelListUnderTarget(string serverId, string wwn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderTarget", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderTargetRes" +
            "ponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.InitiatorChannel[]> ProxyGetInitiatorChannelListUnderTargetAsync(string serverId, string wwn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderClientRes" +
            "ponse")]
        OsnTester.OsnProxy.InitiatorChannel[] ProxyGetInitiatorChannelListUnderClient(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetInitiatorChannelListUnderClientRes" +
            "ponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.InitiatorChannel[]> ProxyGetInitiatorChannelListUnderClientAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddInitiatorChannelToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddInitiatorChannelToClientResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyAddInitiatorChannelToClient(string clientId, string alias, string wwn, string ipAddr, OsnTester.OsnProxy.PortType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAddInitiatorChannelToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAddInitiatorChannelToClientResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddInitiatorChannelToClientAsync(string clientId, string alias, string wwn, string ipAddr, OsnTester.OsnProxy.PortType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyBatchAddInitiatorChannelToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyBatchAddInitiatorChannelToClientRespo" +
            "nse")]
        OsnTester.OsnProxy.OSNStatus ProxyBatchAddInitiatorChannelToClient(string clientId, OsnTester.OsnProxy.ChannelBasis[] channelList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyBatchAddInitiatorChannelToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyBatchAddInitiatorChannelToClientRespo" +
            "nse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyBatchAddInitiatorChannelToClientAsync(string clientId, OsnTester.OsnProxy.ChannelBasis[] channelList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckInitiatorChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckInitiatorChannelAliasResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyCheckInitiatorChannelAlias(string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyCheckInitiatorChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyCheckInitiatorChannelAliasResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckInitiatorChannelAliasAsync(string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameInitiatorChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameInitiatorChannelAliasResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyRenameInitiatorChannelAlias(string clientId, string wwn, string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRenameInitiatorChannelAlias", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRenameInitiatorChannelAliasResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameInitiatorChannelAliasAsync(string clientId, string wwn, string newAlias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveInitiatorChannelFromClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveInitiatorChannelFromClientRespo" +
            "nse")]
        OsnTester.OsnProxy.OSNStatus ProxyRemoveInitiatorChannelFromClient(string clientId, string wwn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyRemoveInitiatorChannelFromClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyRemoveInitiatorChannelFromClientRespo" +
            "nse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveInitiatorChannelFromClientAsync(string clientId, string wwn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetChannelPairListByInitiatorChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetChannelPairListByInitiatorChannelR" +
            "esponse")]
        OsnTester.OsnProxy.ChannelPair[] ProxyGetChannelPairListByInitiatorChannel(string servGroupId, string iChannelWWN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetChannelPairListByInitiatorChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetChannelPairListByInitiatorChannelR" +
            "esponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair[]> ProxyGetChannelPairListByInitiatorChannelAsync(string servGroupId, string iChannelWWN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryLinkedChannelCountByInitiatorCha" +
            "nnel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryLinkedChannelCountByInitiatorCha" +
            "nnelResponse")]
        uint ProxyQueryLinkedChannelCountByInitiatorChannel(string servGroupId, string iChannelWWN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyQueryLinkedChannelCountByInitiatorCha" +
            "nnel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyQueryLinkedChannelCountByInitiatorCha" +
            "nnelResponse")]
        System.Threading.Tasks.Task<uint> ProxyQueryLinkedChannelCountByInitiatorChannelAsync(string servGroupId, string iChannelWWN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingListResponse")]
        OsnTester.OsnProxy.StorageMapping[] ProxyGetStorageMappingList(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageMapping[]> ProxyGetStorageMappingListAsync(string volumeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchStorageMappingListResponse")]
        OsnTester.OsnProxy.StorageMapping[] ProxySearchStorageMappingList(string volumeId, string key, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxySearchStorageMappingList", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxySearchStorageMappingListResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageMapping[]> ProxySearchStorageMappingListAsync(string volumeId, string key, string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingListUnderClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingListUnderClientRespo" +
            "nse")]
        OsnTester.OsnProxy.StorageMapping[] ProxyGetStorageMappingListUnderClient(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingListUnderClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetStorageMappingListUnderClientRespo" +
            "nse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageMapping[]> ProxyGetStorageMappingListUnderClientAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAssignedVolumeListUnderClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAssignedVolumeListUnderClientRespo" +
            "nse")]
        OsnTester.OsnProxy.StorageVolume[] ProxyGetAssignedVolumeListUnderClient(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyGetAssignedVolumeListUnderClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyGetAssignedVolumeListUnderClientRespo" +
            "nse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetAssignedVolumeListUnderClientAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeByChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeByChannelResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyAssignStorageVolumeByChannel(OsnTester.OsnProxy.MappingEntry mapEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeByChannel", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeByChannelResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAssignStorageVolumeByChannelAsync(OsnTester.OsnProxy.MappingEntry mapEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeToClientResponse")]
        OsnTester.OsnProxy.OSNStatus ProxyAssignStorageVolumeToClient(string volumeId, string clientId, OsnTester.OsnProxy.MapAuth auth, OsnTester.OsnProxy.MapKind mapKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyAssignStorageVolumeToClientResponse")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAssignStorageVolumeToClientAsync(string volumeId, string clientId, OsnTester.OsnProxy.MapAuth auth, OsnTester.OsnProxy.MapKind mapKind);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnAssignStorageVolumeToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnAssignStorageVolumeToClientResponse" +
            "")]
        OsnTester.OsnProxy.OSNStatus ProxyUnAssignStorageVolumeToClient(string volumeId, string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOSNPlatformService/ProxyUnAssignStorageVolumeToClient", ReplyAction="http://tempuri.org/IOSNPlatformService/ProxyUnAssignStorageVolumeToClientResponse" +
            "")]
        System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnAssignStorageVolumeToClientAsync(string volumeId, string clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOSNPlatformServiceChannel : OsnTester.OsnProxy.IOSNPlatformService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OSNPlatformServiceClient : System.ServiceModel.ClientBase<OsnTester.OsnProxy.IOSNPlatformService>, OsnTester.OsnProxy.IOSNPlatformService {
        
        public OSNPlatformServiceClient() {
        }
        
        public OSNPlatformServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OSNPlatformServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OSNPlatformServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OSNPlatformServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyModifyStorageMappingItem(string mappingId, ushort newLun, OsnTester.OsnProxy.MapAuth auth) {
            return base.Channel.ProxyModifyStorageMappingItem(mappingId, newLun, auth);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyStorageMappingItemAsync(string mappingId, ushort newLun, OsnTester.OsnProxy.MapAuth auth) {
            return base.Channel.ProxyModifyStorageMappingItemAsync(mappingId, newLun, auth);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyEnableStorageMappingList(string[] mappingIdList) {
            return base.Channel.ProxyEnableStorageMappingList(mappingIdList);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEnableStorageMappingListAsync(string[] mappingIdList) {
            return base.Channel.ProxyEnableStorageMappingListAsync(mappingIdList);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDisableStorageMappingList(string[] mappingIdList) {
            return base.Channel.ProxyDisableStorageMappingList(mappingIdList);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDisableStorageMappingListAsync(string[] mappingIdList) {
            return base.Channel.ProxyDisableStorageMappingListAsync(mappingIdList);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDisableStorageMappings(string servGroupId, string volueGroupId, string clientId, bool isVolume) {
            return base.Channel.ProxyDisableStorageMappings(servGroupId, volueGroupId, clientId, isVolume);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDisableStorageMappingsAsync(string servGroupId, string volueGroupId, string clientId, bool isVolume) {
            return base.Channel.ProxyDisableStorageMappingsAsync(servGroupId, volueGroupId, clientId, isVolume);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyEnableStorageMappings(string servGroupId, string volueGroupId, string clientId, bool isVolume) {
            return base.Channel.ProxyEnableStorageMappings(servGroupId, volueGroupId, clientId, isVolume);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEnableStorageMappingsAsync(string servGroupId, string volueGroupId, string clientId, bool isVolume) {
            return base.Channel.ProxyEnableStorageMappingsAsync(servGroupId, volueGroupId, clientId, isVolume);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteStorageMappingList(string[] mappingIdList) {
            return base.Channel.ProxyDeleteStorageMappingList(mappingIdList);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteStorageMappingListAsync(string[] mappingIdList) {
            return base.Channel.ProxyDeleteStorageMappingListAsync(mappingIdList);
        }
        
        public OsnTester.OsnProxy.StorageVolume ProxyGetMappingInfoByVolumeId(string volumeId) {
            return base.Channel.ProxyGetMappingInfoByVolumeId(volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume> ProxyGetMappingInfoByVolumeIdAsync(string volumeId) {
            return base.Channel.ProxyGetMappingInfoByVolumeIdAsync(volumeId);
        }
        
        public OsnTester.OsnProxy.ChannelPair ProxyQueryDefaultChannelPair(string tServerId, string iServerId) {
            return base.Channel.ProxyQueryDefaultChannelPair(tServerId, iServerId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair> ProxyQueryDefaultChannelPairAsync(string tServerId, string iServerId) {
            return base.Channel.ProxyQueryDefaultChannelPairAsync(tServerId, iServerId);
        }
        
        public OsnTester.OsnProxy.ChannelPair[] ProxyQueryChannelPairList(string tServerId, string iServerId) {
            return base.Channel.ProxyQueryChannelPairList(tServerId, iServerId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair[]> ProxyQueryChannelPairListAsync(string tServerId, string iServerId) {
            return base.Channel.ProxyQueryChannelPairListAsync(tServerId, iServerId);
        }
        
        public OsnTester.OsnProxy.ChannelPair[] ProxyQueryChannelPairListEx(string tServIpAddr, string iServIpAddr) {
            return base.Channel.ProxyQueryChannelPairListEx(tServIpAddr, iServIpAddr);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair[]> ProxyQueryChannelPairListExAsync(string tServIpAddr, string iServIpAddr) {
            return base.Channel.ProxyQueryChannelPairListExAsync(tServIpAddr, iServIpAddr);
        }
        
        public OsnTester.OsnProxy.InternalMapping[] ProxyGetRelatedInternalMappingList(string volumeId) {
            return base.Channel.ProxyGetRelatedInternalMappingList(volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.InternalMapping[]> ProxyGetRelatedInternalMappingListAsync(string volumeId) {
            return base.Channel.ProxyGetRelatedInternalMappingListAsync(volumeId);
        }
        
        public OsnTester.OsnProxy.StorageLunMirror[] ProxyGetLunMirrorListUnderGroup(string servGroupId) {
            return base.Channel.ProxyGetLunMirrorListUnderGroup(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirror[]> ProxyGetLunMirrorListUnderGroupAsync(string servGroupId) {
            return base.Channel.ProxyGetLunMirrorListUnderGroupAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.StorageLunMirror[] ProxyGetLunMirrorListUnderGroupEx(string servGroupId, string volumeId) {
            return base.Channel.ProxyGetLunMirrorListUnderGroupEx(servGroupId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirror[]> ProxyGetLunMirrorListUnderGroupExAsync(string servGroupId, string volumeId) {
            return base.Channel.ProxyGetLunMirrorListUnderGroupExAsync(servGroupId, volumeId);
        }
        
        public OsnTester.OsnProxy.StorageLunMirrorEx[] ProxyGetSpecificLunMirrorList(string servGroupId, string magicId) {
            return base.Channel.ProxyGetSpecificLunMirrorList(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirrorEx[]> ProxyGetSpecificLunMirrorListAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyGetSpecificLunMirrorListAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.StorageLunMirrorEx[] ProxyGetLunMirrorListUnderServer(string serverId, string volumeId) {
            return base.Channel.ProxyGetLunMirrorListUnderServer(serverId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirrorEx[]> ProxyGetLunMirrorListUnderServerAsync(string serverId, string volumeId) {
            return base.Channel.ProxyGetLunMirrorListUnderServerAsync(serverId, volumeId);
        }
        
        public bool ProxyCheckLunMirrorState(string servGroupId, string magicId) {
            return base.Channel.ProxyCheckLunMirrorState(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<bool> ProxyCheckLunMirrorStateAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyCheckLunMirrorStateAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateStorageLunMirror(string servGroupId, string sourceVolId, string mirrorVolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable) {
            return base.Channel.ProxyCreateStorageLunMirror(servGroupId, sourceVolId, mirrorVolId, midPoolId, midRange, category, isEnable);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateStorageLunMirrorAsync(string servGroupId, string sourceVolId, string mirrorVolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable) {
            return base.Channel.ProxyCreateStorageLunMirrorAsync(servGroupId, sourceVolId, mirrorVolId, midPoolId, midRange, category, isEnable);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateStorageLunMirrorEx(string servGroupId, string sourceVolId, string mirPoolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable) {
            return base.Channel.ProxyCreateStorageLunMirrorEx(servGroupId, sourceVolId, mirPoolId, midPoolId, midRange, category, isEnable);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateStorageLunMirrorExAsync(string servGroupId, string sourceVolId, string mirPoolId, string midPoolId, OsnTester.OsnProxy.EnlargeRange midRange, OsnTester.OsnProxy.LunMirrorType category, bool isEnable) {
            return base.Channel.ProxyCreateStorageLunMirrorExAsync(servGroupId, sourceVolId, mirPoolId, midPoolId, midRange, category, isEnable);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyEnableStorageLunMirror(string servGroupId, string magicId) {
            return base.Channel.ProxyEnableStorageLunMirror(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEnableStorageLunMirrorAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyEnableStorageLunMirrorAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDisableStorageLunMirror(string servGroupId, string magicId) {
            return base.Channel.ProxyDisableStorageLunMirror(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDisableStorageLunMirrorAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyDisableStorageLunMirrorAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyContinueStorageLunMirror(string servGroupId, string magicId) {
            return base.Channel.ProxyContinueStorageLunMirror(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyContinueStorageLunMirrorAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyContinueStorageLunMirrorAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyPauseStorageLunMirror(string servGroupId, string magicId) {
            return base.Channel.ProxyPauseStorageLunMirror(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyPauseStorageLunMirrorAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyPauseStorageLunMirrorAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteStorageLunMirror(string servGroupId, string magicId, bool bForceFlag) {
            return base.Channel.ProxyDeleteStorageLunMirror(servGroupId, magicId, bForceFlag);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteStorageLunMirrorAsync(string servGroupId, string magicId, bool bForceFlag) {
            return base.Channel.ProxyDeleteStorageLunMirrorAsync(servGroupId, magicId, bForceFlag);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyInitializeStorageLunMirror(string servGroupId, string magicId, bool bForceToUp) {
            return base.Channel.ProxyInitializeStorageLunMirror(servGroupId, magicId, bForceToUp);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyInitializeStorageLunMirrorAsync(string servGroupId, string magicId, bool bForceToUp) {
            return base.Channel.ProxyInitializeStorageLunMirrorAsync(servGroupId, magicId, bForceToUp);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyForceRecoveryStorageLunMirror(string servGroupId, string magicId) {
            return base.Channel.ProxyForceRecoveryStorageLunMirror(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyForceRecoveryStorageLunMirrorAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyForceRecoveryStorageLunMirrorAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.EnlargeRange ProxyGetLunMirrorEnlargeRange(string servGroupId, string magicId) {
            return base.Channel.ProxyGetLunMirrorEnlargeRange(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.EnlargeRange> ProxyGetLunMirrorEnlargeRangeAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyGetLunMirrorEnlargeRangeAsync(servGroupId, magicId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyModifyLunMirrorEnlargeRange(string servGroupId, string magicId, OsnTester.OsnProxy.EnlargeRange midRange) {
            return base.Channel.ProxyModifyLunMirrorEnlargeRange(servGroupId, magicId, midRange);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyLunMirrorEnlargeRangeAsync(string servGroupId, string magicId, OsnTester.OsnProxy.EnlargeRange midRange) {
            return base.Channel.ProxyModifyLunMirrorEnlargeRangeAsync(servGroupId, magicId, midRange);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckSnapshotConsistent(string servGroupId, string magicId) {
            return base.Channel.ProxyCheckSnapshotConsistent(servGroupId, magicId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckSnapshotConsistentAsync(string servGroupId, string magicId) {
            return base.Channel.ProxyCheckSnapshotConsistentAsync(servGroupId, magicId);
        }
        
        public int ProxySearchOptionalVolumeCountByPoolIdAndVolName(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxySearchOptionalVolumeCountByPoolIdAndVolName(serverId, poolId, volName, filter);
        }
        
        public System.Threading.Tasks.Task<int> ProxySearchOptionalVolumeCountByPoolIdAndVolNameAsync(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxySearchOptionalVolumeCountByPoolIdAndVolNameAsync(serverId, poolId, volName, filter);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxySearchOptionalVolumeListByPoolIdAndVolName(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchOptionalVolumeListByPoolIdAndVolName(serverId, poolId, volName, filter, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxySearchOptionalVolumeListByPoolIdAndVolNameAsync(string serverId, string poolId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchOptionalVolumeListByPoolIdAndVolNameAsync(serverId, poolId, volName, filter, readoffset, perpageNum);
        }
        
        public int ProxySearchOptionalVolumeCountUnderGroupByVolName(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxySearchOptionalVolumeCountUnderGroupByVolName(servGroupId, volName, filter);
        }
        
        public System.Threading.Tasks.Task<int> ProxySearchOptionalVolumeCountUnderGroupByVolNameAsync(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxySearchOptionalVolumeCountUnderGroupByVolNameAsync(servGroupId, volName, filter);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxySearchOptionalVolumeListUnderGroupByVolName(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchOptionalVolumeListUnderGroupByVolName(servGroupId, volName, filter, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxySearchOptionalVolumeListUnderGroupByVolNameAsync(string servGroupId, string volName, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchOptionalVolumeListUnderGroupByVolNameAsync(servGroupId, volName, filter, readoffset, perpageNum);
        }
        
        public int ProxySearchStorageClientCountByGroupIdAndClientName(string servGroupId, string clientName) {
            return base.Channel.ProxySearchStorageClientCountByGroupIdAndClientName(servGroupId, clientName);
        }
        
        public System.Threading.Tasks.Task<int> ProxySearchStorageClientCountByGroupIdAndClientNameAsync(string servGroupId, string clientName) {
            return base.Channel.ProxySearchStorageClientCountByGroupIdAndClientNameAsync(servGroupId, clientName);
        }
        
        public OsnTester.OsnProxy.StorageClient[] ProxySearchStorageClientListByGroupIdAndClientName(string servGroupId, string clientName, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchStorageClientListByGroupIdAndClientName(servGroupId, clientName, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageClient[]> ProxySearchStorageClientListByGroupIdAndClientNameAsync(string servGroupId, string clientName, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchStorageClientListByGroupIdAndClientNameAsync(servGroupId, clientName, readoffset, perpageNum);
        }
        
        public int ProxySearchPoolCountByServerIdAndPoolName(string serverId, string poolName) {
            return base.Channel.ProxySearchPoolCountByServerIdAndPoolName(serverId, poolName);
        }
        
        public System.Threading.Tasks.Task<int> ProxySearchPoolCountByServerIdAndPoolNameAsync(string serverId, string poolName) {
            return base.Channel.ProxySearchPoolCountByServerIdAndPoolNameAsync(serverId, poolName);
        }
        
        public OsnTester.OsnProxy.StoragePool[] ProxySearchPoolListByServerIdAndPoolName(string serverId, string poolName, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchPoolListByServerIdAndPoolName(serverId, poolName, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool[]> ProxySearchPoolListByServerIdAndPoolNameAsync(string serverId, string poolName, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchPoolListByServerIdAndPoolNameAsync(serverId, poolName, readoffset, perpageNum);
        }
        
        public int ProxySearchLunMirrorCountByGroupIdAndVolName(string servGroupId, string volumeName) {
            return base.Channel.ProxySearchLunMirrorCountByGroupIdAndVolName(servGroupId, volumeName);
        }
        
        public System.Threading.Tasks.Task<int> ProxySearchLunMirrorCountByGroupIdAndVolNameAsync(string servGroupId, string volumeName) {
            return base.Channel.ProxySearchLunMirrorCountByGroupIdAndVolNameAsync(servGroupId, volumeName);
        }
        
        public OsnTester.OsnProxy.StorageLunMirror[] ProxySearchLunMirrorListByGroupIdAndVolName(string servGroupId, string volumeName, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchLunMirrorListByGroupIdAndVolName(servGroupId, volumeName, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageLunMirror[]> ProxySearchLunMirrorListByGroupIdAndVolNameAsync(string servGroupId, string volumeName, int readoffset, int perpageNum) {
            return base.Channel.ProxySearchLunMirrorListByGroupIdAndVolNameAsync(servGroupId, volumeName, readoffset, perpageNum);
        }
        
        public int ProxyReadLogCountByServerGroupId(string groupId) {
            return base.Channel.ProxyReadLogCountByServerGroupId(groupId);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAsync(string groupId) {
            return base.Channel.ProxyReadLogCountByServerGroupIdAsync(groupId);
        }
        
        public OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupId(string groupId, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupId(groupId, pageIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAsync(string groupId, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupIdAsync(groupId, pageIndex, perpageNum);
        }
        
        public int ProxyReadLogCountByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType) {
            return base.Channel.ProxyReadLogCountByServerGroupIdAndLogType(groupId, logType);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType) {
            return base.Channel.ProxyReadLogCountByServerGroupIdAndLogTypeAsync(groupId, logType);
        }
        
        public OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupIdAndLogType(groupId, logType, pageIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupIdAndLogTypeAsync(groupId, logType, pageIndex, perpageNum);
        }
        
        public int ProxyReadLogCountByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadLogCountByServerGroupIdAndTime(groupId, startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadLogCountByServerGroupIdAndTimeAsync(groupId, startTime, endTime);
        }
        
        public OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupIdAndTime(groupId, startTime, endTime, pageIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupIdAndTimeAsync(groupId, startTime, endTime, pageIndex, perpageNum);
        }
        
        public int ProxyReadLogCountByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadLogCountByServerGroupIdAndLogTypeAndTime(groupId, logType, startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadLogCountByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadLogCountByServerGroupIdAndLogTypeAndTimeAsync(groupId, logType, startTime, endTime);
        }
        
        public OsnTester.OsnProxy.OSNLogItem[] ProxyReadLogDetailByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupIdAndLogTypeAndTime(groupId, logType, startTime, endTime, pageIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNLogItem[]> ProxyReadLogDetailByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int pageIndex, int perpageNum) {
            return base.Channel.ProxyReadLogDetailByServerGroupIdAndLogTypeAndTimeAsync(groupId, logType, startTime, endTime, pageIndex, perpageNum);
        }
        
        public int ProxyDeleteLogByServerGroupId(string groupId) {
            return base.Channel.ProxyDeleteLogByServerGroupId(groupId);
        }
        
        public System.Threading.Tasks.Task<int> ProxyDeleteLogByServerGroupIdAsync(string groupId) {
            return base.Channel.ProxyDeleteLogByServerGroupIdAsync(groupId);
        }
        
        public int ProxyDeleteAlarmLogByServerGroupId(string groupId) {
            return base.Channel.ProxyDeleteAlarmLogByServerGroupId(groupId);
        }
        
        public System.Threading.Tasks.Task<int> ProxyDeleteAlarmLogByServerGroupIdAsync(string groupId) {
            return base.Channel.ProxyDeleteAlarmLogByServerGroupIdAsync(groupId);
        }
        
        public int ProxyReadAlarmLogCountByServerGroupId(string groupId) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupId(groupId);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAsync(string groupId) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupIdAsync(groupId);
        }
        
        public OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupId(string groupId, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupId(groupId, readIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAsync(string groupId, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupIdAsync(groupId, readIndex, perpageNum);
        }
        
        public int ProxyReadAlarmLogCountByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupIdAndLogType(groupId, logType);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAsync(groupId, logType);
        }
        
        public OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupIdAndLogType(string groupId, OsnTester.OsnProxy.LogType logType, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupIdAndLogType(groupId, logType, readIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAsync(string groupId, OsnTester.OsnProxy.LogType logType, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAsync(groupId, logType, readIndex, perpageNum);
        }
        
        public int ProxyReadAlarmLogCountByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupIdAndTime(groupId, startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupIdAndTimeAsync(groupId, startTime, endTime);
        }
        
        public OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupIdAndTime(string groupId, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupIdAndTime(groupId, startTime, endTime, readIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAndTimeAsync(string groupId, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupIdAndTimeAsync(groupId, startTime, endTime, readIndex, perpageNum);
        }
        
        public int ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAndTime(groupId, logType, startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<int> ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.ProxyReadAlarmLogCountByServerGroupIdAndLogTypeAndTimeAsync(groupId, logType, startTime, endTime);
        }
        
        public OsnTester.OsnProxy.OSNAlarmLogItem[] ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAndTime(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAndTime(groupId, logType, startTime, endTime, readIndex, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNAlarmLogItem[]> ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAndTimeAsync(string groupId, OsnTester.OsnProxy.LogType logType, System.DateTime startTime, System.DateTime endTime, int readIndex, int perpageNum) {
            return base.Channel.ProxyReadAlarmLogDetailByServerGroupIdAndLogTypeAndTimeAsync(groupId, logType, startTime, endTime, readIndex, perpageNum);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyMakeCDPSetting(string servGroupId, string volumeId, string poolId, uint unitSize, ulong initSize, uint increment, ulong MaxSize) {
            return base.Channel.ProxyMakeCDPSetting(servGroupId, volumeId, poolId, unitSize, initSize, increment, MaxSize);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyMakeCDPSettingAsync(string servGroupId, string volumeId, string poolId, uint unitSize, ulong initSize, uint increment, ulong MaxSize) {
            return base.Channel.ProxyMakeCDPSettingAsync(servGroupId, volumeId, poolId, unitSize, initSize, increment, MaxSize);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyModifyCDPSetting(string groupId, string volumeId, uint increment, ulong MaxSize) {
            return base.Channel.ProxyModifyCDPSetting(groupId, volumeId, increment, MaxSize);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyCDPSettingAsync(string groupId, string volumeId, uint increment, ulong MaxSize) {
            return base.Channel.ProxyModifyCDPSettingAsync(groupId, volumeId, increment, MaxSize);
        }
        
        public OsnTester.OsnProxy.OSNCDPSetting ProxyGetCDPSetting(string groupId, string volumeId) {
            return base.Channel.ProxyGetCDPSetting(groupId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNCDPSetting> ProxyGetCDPSettingAsync(string groupId, string volumeId) {
            return base.Channel.ProxyGetCDPSettingAsync(groupId, volumeId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRemoveCDPSetting(string servGroupId, string volumeId) {
            return base.Channel.ProxyRemoveCDPSetting(servGroupId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveCDPSettingAsync(string servGroupId, string volumeId) {
            return base.Channel.ProxyRemoveCDPSettingAsync(servGroupId, volumeId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateNormalAgentCDP(string servGroupId, string volumeId, string volumaName, string clientId, string bufVolID) {
            return base.Channel.ProxyCreateNormalAgentCDP(servGroupId, volumeId, volumaName, clientId, bufVolID);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateNormalAgentCDPAsync(string servGroupId, string volumeId, string volumaName, string clientId, string bufVolID) {
            return base.Channel.ProxyCreateNormalAgentCDPAsync(servGroupId, volumeId, volumaName, clientId, bufVolID);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateNormalCDP(string servGroupId, string volumeId) {
            return base.Channel.ProxyCreateNormalCDP(servGroupId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateNormalCDPAsync(string servGroupId, string volumeId) {
            return base.Channel.ProxyCreateNormalCDPAsync(servGroupId, volumeId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteCDP(string servGroupId, string volumeId, long snapshotTime) {
            return base.Channel.ProxyDeleteCDP(servGroupId, volumeId, snapshotTime);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteCDPAsync(string servGroupId, string volumeId, long snapshotTime) {
            return base.Channel.ProxyDeleteCDPAsync(servGroupId, volumeId, snapshotTime);
        }
        
        public OsnTester.OsnProxy.CDPSnapshotDetailInfo[] ProxyGetCdpSnapshotDetailInfo(string servGroupId, string volId) {
            return base.Channel.ProxyGetCdpSnapshotDetailInfo(servGroupId, volId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.CDPSnapshotDetailInfo[]> ProxyGetCdpSnapshotDetailInfoAsync(string servGroupId, string volId) {
            return base.Channel.ProxyGetCdpSnapshotDetailInfoAsync(servGroupId, volId);
        }
        
        public OsnTester.OsnProxy.OSNCDPInfo[] ProxyGetCDPInfoList(string servGroupId) {
            return base.Channel.ProxyGetCDPInfoList(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNCDPInfo[]> ProxyGetCDPInfoListAsync(string servGroupId) {
            return base.Channel.ProxyGetCDPInfoListAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxySetCDPBufferDefaultSetting(string servGroupId, uint unitSize, uint increment, ulong MaxSize) {
            return base.Channel.ProxySetCDPBufferDefaultSetting(servGroupId, unitSize, increment, MaxSize);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySetCDPBufferDefaultSettingAsync(string servGroupId, uint unitSize, uint increment, ulong MaxSize) {
            return base.Channel.ProxySetCDPBufferDefaultSettingAsync(servGroupId, unitSize, increment, MaxSize);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRestoreCDPSnapshot(string groupId, string volumeId, long snapshotTime, string tgtVolumeId) {
            return base.Channel.ProxyRestoreCDPSnapshot(groupId, volumeId, snapshotTime, tgtVolumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRestoreCDPSnapshotAsync(string groupId, string volumeId, long snapshotTime, string tgtVolumeId) {
            return base.Channel.ProxyRestoreCDPSnapshotAsync(groupId, volumeId, snapshotTime, tgtVolumeId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteSnapshot(string groupId, string volumeId, string tgtVolumeId) {
            return base.Channel.ProxyDeleteSnapshot(groupId, volumeId, tgtVolumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteSnapshotAsync(string groupId, string volumeId, string tgtVolumeId) {
            return base.Channel.ProxyDeleteSnapshotAsync(groupId, volumeId, tgtVolumeId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyLoopBackCDPSnapshot(string groupId, string volumeId, long snapshotTime, string tcwwn, string icwwn, OsnTester.OsnProxy.MapAuth auth) {
            return base.Channel.ProxyLoopBackCDPSnapshot(groupId, volumeId, snapshotTime, tcwwn, icwwn, auth);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyLoopBackCDPSnapshotAsync(string groupId, string volumeId, long snapshotTime, string tcwwn, string icwwn, OsnTester.OsnProxy.MapAuth auth) {
            return base.Channel.ProxyLoopBackCDPSnapshotAsync(groupId, volumeId, snapshotTime, tcwwn, icwwn, auth);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyUnLoopBackCDPSnapshot(string groupId, string volumeId, long snapshotTime) {
            return base.Channel.ProxyUnLoopBackCDPSnapshot(groupId, volumeId, snapshotTime);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnLoopBackCDPSnapshotAsync(string groupId, string volumeId, long snapshotTime) {
            return base.Channel.ProxyUnLoopBackCDPSnapshotAsync(groupId, volumeId, snapshotTime);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCISnapshot(string groupId, string volumeId, string tgtVolumeId) {
            return base.Channel.ProxyCISnapshot(groupId, volumeId, tgtVolumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCISnapshotAsync(string groupId, string volumeId, string tgtVolumeId) {
            return base.Channel.ProxyCISnapshotAsync(groupId, volumeId, tgtVolumeId);
        }
        
        public OsnTester.OsnProxy.PageCDPSnapshotInfo ProxyPageCDPSnapshotDetailInfo(string groupId, string volId, int offset, int pagesize) {
            return base.Channel.ProxyPageCDPSnapshotDetailInfo(groupId, volId, offset, pagesize);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.PageCDPSnapshotInfo> ProxyPageCDPSnapshotDetailInfoAsync(string groupId, string volId, int offset, int pagesize) {
            return base.Channel.ProxyPageCDPSnapshotDetailInfoAsync(groupId, volId, offset, pagesize);
        }
        
        public OsnTester.OsnProxy.OSNCDPInfo ProxyGetCDPInfoByVolumeName(string groupId, string volumeName) {
            return base.Channel.ProxyGetCDPInfoByVolumeName(groupId, volumeName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNCDPInfo> ProxyGetCDPInfoByVolumeNameAsync(string groupId, string volumeName) {
            return base.Channel.ProxyGetCDPInfoByVolumeNameAsync(groupId, volumeName);
        }
        
        public OsnTester.OsnProxy.CDPSnapshotDetailInfo ProxyGetCDPSnapshotByTime(string groupId, string volId, long snapshotTime) {
            return base.Channel.ProxyGetCDPSnapshotByTime(groupId, volId, snapshotTime);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.CDPSnapshotDetailInfo> ProxyGetCDPSnapshotByTimeAsync(string groupId, string volId, long snapshotTime) {
            return base.Channel.ProxyGetCDPSnapshotByTimeAsync(groupId, volId, snapshotTime);
        }
        
        public OsnTester.OsnProxy.PageCDPInfo ProxyPageCDPInfoList(string groupId, int offset, int pagesize) {
            return base.Channel.ProxyPageCDPInfoList(groupId, offset, pagesize);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.PageCDPInfo> ProxyPageCDPInfoListAsync(string groupId, int offset, int pagesize) {
            return base.Channel.ProxyPageCDPInfoListAsync(groupId, offset, pagesize);
        }
        
        public OsnTester.OsnProxy.PageCDPInfo ProxySearchCDPInfoList(string groupId, int offset, int pagesize, string volumeName) {
            return base.Channel.ProxySearchCDPInfoList(groupId, offset, pagesize, volumeName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.PageCDPInfo> ProxySearchCDPInfoListAsync(string groupId, int offset, int pagesize, string volumeName) {
            return base.Channel.ProxySearchCDPInfoListAsync(groupId, offset, pagesize, volumeName);
        }
        
        public OsnTester.OsnProxy.TargetChannel[] ProxyGetLoopBackTargetChannelListByInitiatorChannel(string groupId, string volumeId, string iChannelWWN) {
            return base.Channel.ProxyGetLoopBackTargetChannelListByInitiatorChannel(groupId, volumeId, iChannelWWN);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.TargetChannel[]> ProxyGetLoopBackTargetChannelListByInitiatorChannelAsync(string groupId, string volumeId, string iChannelWWN) {
            return base.Channel.ProxyGetLoopBackTargetChannelListByInitiatorChannelAsync(groupId, volumeId, iChannelWWN);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateSchedule(string goupId, OsnTester.OsnProxy.OSNSchedule schedule) {
            return base.Channel.ProxyCreateSchedule(goupId, schedule);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateScheduleAsync(string goupId, OsnTester.OsnProxy.OSNSchedule schedule) {
            return base.Channel.ProxyCreateScheduleAsync(goupId, schedule);
        }
        
        public OsnTester.OsnProxy.OSNSchedule ProxyQuerySchedule(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget) {
            return base.Channel.ProxyQuerySchedule(goupId, scheduleTarget);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyQueryScheduleAsync(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget) {
            return base.Channel.ProxyQueryScheduleAsync(goupId, scheduleTarget);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteSchedule(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget) {
            return base.Channel.ProxyDeleteSchedule(goupId, scheduleTarget);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteScheduleAsync(string goupId, OsnTester.OsnProxy.ScheduleTarget scheduleTarget) {
            return base.Channel.ProxyDeleteScheduleAsync(goupId, scheduleTarget);
        }
        
        public OsnTester.OsnProxy.OSNSchedule ProxyGetScheduleTemplateByName(string groupId, string templateName) {
            return base.Channel.ProxyGetScheduleTemplateByName(groupId, templateName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyGetScheduleTemplateByNameAsync(string groupId, string templateName) {
            return base.Channel.ProxyGetScheduleTemplateByNameAsync(groupId, templateName);
        }
        
        public OsnTester.OsnProxy.OSNSchedule[] ProxyGetCDPScheduleTemplateList(string groupId) {
            return base.Channel.ProxyGetCDPScheduleTemplateList(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule[]> ProxyGetCDPScheduleTemplateListAsync(string groupId) {
            return base.Channel.ProxyGetCDPScheduleTemplateListAsync(groupId);
        }
        
        public OsnTester.OsnProxy.OSNSchedule[] ProxyGetLunMirrorScheduleTemplateList(string groupId) {
            return base.Channel.ProxyGetLunMirrorScheduleTemplateList(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule[]> ProxyGetLunMirrorScheduleTemplateListAsync(string groupId) {
            return base.Channel.ProxyGetLunMirrorScheduleTemplateListAsync(groupId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteScheduleTemplate(string groupId, string templateName) {
            return base.Channel.ProxyDeleteScheduleTemplate(groupId, templateName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteScheduleTemplateAsync(string groupId, string templateName) {
            return base.Channel.ProxyDeleteScheduleTemplateAsync(groupId, templateName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateScheduleTemplate(string groupId, OsnTester.OsnProxy.OSNSchedule schedule) {
            return base.Channel.ProxyCreateScheduleTemplate(groupId, schedule);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateScheduleTemplateAsync(string groupId, OsnTester.OsnProxy.OSNSchedule schedule) {
            return base.Channel.ProxyCreateScheduleTemplateAsync(groupId, schedule);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyEditScheduleTemplate(string groupId, OsnTester.OsnProxy.OSNSchedule schedule) {
            return base.Channel.ProxyEditScheduleTemplate(groupId, schedule);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyEditScheduleTemplateAsync(string groupId, OsnTester.OsnProxy.OSNSchedule schedule) {
            return base.Channel.ProxyEditScheduleTemplateAsync(groupId, schedule);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateScheduleByTemplate(string groupId, string TemplateName, OsnTester.OsnProxy.ScheduleTarget scheduleTarget) {
            return base.Channel.ProxyCreateScheduleByTemplate(groupId, TemplateName, scheduleTarget);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateScheduleByTemplateAsync(string groupId, string TemplateName, OsnTester.OsnProxy.ScheduleTarget scheduleTarget) {
            return base.Channel.ProxyCreateScheduleByTemplateAsync(groupId, TemplateName, scheduleTarget);
        }
        
        public OsnTester.OsnProxy.OSNSchedule ProxyGetDefaultLunMirrorScheduleTemplate(string groupId) {
            return base.Channel.ProxyGetDefaultLunMirrorScheduleTemplate(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyGetDefaultLunMirrorScheduleTemplateAsync(string groupId) {
            return base.Channel.ProxyGetDefaultLunMirrorScheduleTemplateAsync(groupId);
        }
        
        public OsnTester.OsnProxy.OSNSchedule ProxyGetDefaultCDPScheduleTemplate(string groupId) {
            return base.Channel.ProxyGetDefaultCDPScheduleTemplate(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSchedule> ProxyGetDefaultCDPScheduleTemplateAsync(string groupId) {
            return base.Channel.ProxyGetDefaultCDPScheduleTemplateAsync(groupId);
        }
        
        public OsnTester.OsnProxy.OSNDiskInfo ProxyGetPhysicalDiskInfo(string groupId) {
            return base.Channel.ProxyGetPhysicalDiskInfo(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNDiskInfo> ProxyGetPhysicalDiskInfoAsync(string groupId) {
            return base.Channel.ProxyGetPhysicalDiskInfoAsync(groupId);
        }
        
        public OsnTester.OsnProxy.Performance[] ProxyGetVirtualDiskPerformance(string groupId) {
            return base.Channel.ProxyGetVirtualDiskPerformance(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.Performance[]> ProxyGetVirtualDiskPerformanceAsync(string groupId) {
            return base.Channel.ProxyGetVirtualDiskPerformanceAsync(groupId);
        }
        
        public OsnTester.OsnProxy.Performance[] ProxyGetPhysicalDiskPerformance(string groupId) {
            return base.Channel.ProxyGetPhysicalDiskPerformance(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.Performance[]> ProxyGetPhysicalDiskPerformanceAsync(string groupId) {
            return base.Channel.ProxyGetPhysicalDiskPerformanceAsync(groupId);
        }
        
        public int ProxySetPhysicalDiskPerformanceConfig(string groupId, bool isEnable) {
            return base.Channel.ProxySetPhysicalDiskPerformanceConfig(groupId, isEnable);
        }
        
        public System.Threading.Tasks.Task<int> ProxySetPhysicalDiskPerformanceConfigAsync(string groupId, bool isEnable) {
            return base.Channel.ProxySetPhysicalDiskPerformanceConfigAsync(groupId, isEnable);
        }
        
        public OsnTester.OsnProxy.IpmiStatus[] ProxyCheckIpmiStatusByIP(string servIpAddr) {
            return base.Channel.ProxyCheckIpmiStatusByIP(servIpAddr);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.IpmiStatus[]> ProxyCheckIpmiStatusByIPAsync(string servIpAddr) {
            return base.Channel.ProxyCheckIpmiStatusByIPAsync(servIpAddr);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyValidateIPMIConfig(string servIpAddr, string ipmiIp, string user, string password) {
            return base.Channel.ProxyValidateIPMIConfig(servIpAddr, ipmiIp, user, password);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyValidateIPMIConfigAsync(string servIpAddr, string ipmiIp, string user, string password) {
            return base.Channel.ProxyValidateIPMIConfigAsync(servIpAddr, ipmiIp, user, password);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyUpdateIPMIConfig(string serverId, string ipmiIp, string user, string password) {
            return base.Channel.ProxyUpdateIPMIConfig(serverId, ipmiIp, user, password);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUpdateIPMIConfigAsync(string serverId, string ipmiIp, string user, string password) {
            return base.Channel.ProxyUpdateIPMIConfigAsync(serverId, ipmiIp, user, password);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyValidateLogin(string user, string password) {
            return base.Channel.ProxyValidateLogin(user, password);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyValidateLoginAsync(string user, string password) {
            return base.Channel.ProxyValidateLoginAsync(user, password);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateAccount(string user, OsnTester.OsnProxy.UserRole role, string password) {
            return base.Channel.ProxyCreateAccount(user, role, password);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateAccountAsync(string user, OsnTester.OsnProxy.UserRole role, string password) {
            return base.Channel.ProxyCreateAccountAsync(user, role, password);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyModifyPassword(string user, string newpwd) {
            return base.Channel.ProxyModifyPassword(user, newpwd);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyPasswordAsync(string user, string newpwd) {
            return base.Channel.ProxyModifyPasswordAsync(user, newpwd);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteAccount(string user) {
            return base.Channel.ProxyDeleteAccount(user);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteAccountAsync(string user) {
            return base.Channel.ProxyDeleteAccountAsync(user);
        }
        
        public OsnTester.OsnProxy.OSNUser[] ProxyGetAccountList() {
            return base.Channel.ProxyGetAccountList();
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNUser[]> ProxyGetAccountListAsync() {
            return base.Channel.ProxyGetAccountListAsync();
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateServerGroup(string servGroupName) {
            return base.Channel.ProxyCreateServerGroup(servGroupName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateServerGroupAsync(string servGroupName) {
            return base.Channel.ProxyCreateServerGroupAsync(servGroupName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckServerGroupName(string servGroupName) {
            return base.Channel.ProxyCheckServerGroupName(servGroupName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckServerGroupNameAsync(string servGroupName) {
            return base.Channel.ProxyCheckServerGroupNameAsync(servGroupName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRenameServerGroup(string servGroupId, string newGroupName) {
            return base.Channel.ProxyRenameServerGroup(servGroupId, newGroupName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameServerGroupAsync(string servGroupId, string newGroupName) {
            return base.Channel.ProxyRenameServerGroupAsync(servGroupId, newGroupName);
        }
        
        public OsnTester.OsnProxy.OSNGroup ProxyGetServerGroupById(string servGroupId) {
            return base.Channel.ProxyGetServerGroupById(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNGroup> ProxyGetServerGroupByIdAsync(string servGroupId) {
            return base.Channel.ProxyGetServerGroupByIdAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.OSNGroup[] ProxyGetServerGroupList() {
            return base.Channel.ProxyGetServerGroupList();
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNGroup[]> ProxyGetServerGroupListAsync() {
            return base.Channel.ProxyGetServerGroupListAsync();
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyIsAllowedDeleteServerGroup(string servGroupId) {
            return base.Channel.ProxyIsAllowedDeleteServerGroup(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsAllowedDeleteServerGroupAsync(string servGroupId) {
            return base.Channel.ProxyIsAllowedDeleteServerGroupAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteServerGroup(string servGroupId) {
            return base.Channel.ProxyDeleteServerGroup(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteServerGroupAsync(string servGroupId) {
            return base.Channel.ProxyDeleteServerGroupAsync(servGroupId);
        }
        
        public int ProxyQueryMaximumOfServerInGroup() {
            return base.Channel.ProxyQueryMaximumOfServerInGroup();
        }
        
        public System.Threading.Tasks.Task<int> ProxyQueryMaximumOfServerInGroupAsync() {
            return base.Channel.ProxyQueryMaximumOfServerInGroupAsync();
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyAddServerToGroup(string servGroupId, string servIpAddr, string servAlias, bool primaryFlag) {
            return base.Channel.ProxyAddServerToGroup(servGroupId, servIpAddr, servAlias, primaryFlag);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddServerToGroupAsync(string servGroupId, string servIpAddr, string servAlias, bool primaryFlag) {
            return base.Channel.ProxyAddServerToGroupAsync(servGroupId, servIpAddr, servAlias, primaryFlag);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyVerifyServerAddress(string servIpAddr) {
            return base.Channel.ProxyVerifyServerAddress(servIpAddr);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyVerifyServerAddressAsync(string servIpAddr) {
            return base.Channel.ProxyVerifyServerAddressAsync(servIpAddr);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckServerAlias(string servAlias) {
            return base.Channel.ProxyCheckServerAlias(servAlias);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckServerAliasAsync(string servAlias) {
            return base.Channel.ProxyCheckServerAliasAsync(servAlias);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRenameServerAlias(string serverId, string newServAlias) {
            return base.Channel.ProxyRenameServerAlias(serverId, newServAlias);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameServerAliasAsync(string serverId, string newServAlias) {
            return base.Channel.ProxyRenameServerAliasAsync(serverId, newServAlias);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxySwitchServerToMaster(string serverId, bool bForceFlag) {
            return base.Channel.ProxySwitchServerToMaster(serverId, bForceFlag);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySwitchServerToMasterAsync(string serverId, bool bForceFlag) {
            return base.Channel.ProxySwitchServerToMasterAsync(serverId, bForceFlag);
        }
        
        public OsnTester.OsnProxy.OSNServer ProxyGetServerById(string serverId) {
            return base.Channel.ProxyGetServerById(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNServer> ProxyGetServerByIdAsync(string serverId) {
            return base.Channel.ProxyGetServerByIdAsync(serverId);
        }
        
        public OsnTester.OsnProxy.OSNServer[] ProxyGetServerListByGroupId(string servGroupId) {
            return base.Channel.ProxyGetServerListByGroupId(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNServer[]> ProxyGetServerListByGroupIdAsync(string servGroupId) {
            return base.Channel.ProxyGetServerListByGroupIdAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyIsAllowedRemoveServer(string serverId) {
            return base.Channel.ProxyIsAllowedRemoveServer(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsAllowedRemoveServerAsync(string serverId) {
            return base.Channel.ProxyIsAllowedRemoveServerAsync(serverId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRemoveServerFromGroup(string serverId) {
            return base.Channel.ProxyRemoveServerFromGroup(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveServerFromGroupAsync(string serverId) {
            return base.Channel.ProxyRemoveServerFromGroupAsync(serverId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyIsMasterServer() {
            return base.Channel.ProxyIsMasterServer();
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsMasterServerAsync() {
            return base.Channel.ProxyIsMasterServerAsync();
        }
        
        public OsnTester.OsnProxy.LicenseAuth ProxyGetServerLicence(string serverId) {
            return base.Channel.ProxyGetServerLicence(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.LicenseAuth> ProxyGetServerLicenceAsync(string serverId) {
            return base.Channel.ProxyGetServerLicenceAsync(serverId);
        }
        
        public OsnTester.OsnProxy.LicenseAuth ProxyGetServerGroupLicence(string servGroupId) {
            return base.Channel.ProxyGetServerGroupLicence(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.LicenseAuth> ProxyGetServerGroupLicenceAsync(string servGroupId) {
            return base.Channel.ProxyGetServerGroupLicenceAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.OSNSystem ProxyGetServerSystemInfo(string serverId) {
            return base.Channel.ProxyGetServerSystemInfo(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNSystem> ProxyGetServerSystemInfoAsync(string serverId) {
            return base.Channel.ProxyGetServerSystemInfoAsync(serverId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyUpdateGroupRole(string curGroupId, OsnTester.OsnProxy.GroupRole role, string remoteGroupId, OsnTester.OsnProxy.GroupRole remoteRole) {
            return base.Channel.ProxyUpdateGroupRole(curGroupId, role, remoteGroupId, remoteRole);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUpdateGroupRoleAsync(string curGroupId, OsnTester.OsnProxy.GroupRole role, string remoteGroupId, OsnTester.OsnProxy.GroupRole remoteRole) {
            return base.Channel.ProxyUpdateGroupRoleAsync(curGroupId, role, remoteGroupId, remoteRole);
        }
        
        public OsnTester.OsnProxy.GroupRole ProxyGetGroupRole(string servGroupId) {
            return base.Channel.ProxyGetGroupRole(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.GroupRole> ProxyGetGroupRoleAsync(string servGroupId) {
            return base.Channel.ProxyGetGroupRoleAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxySetGroupsRole(string curGroupId, OsnTester.OsnProxy.GroupRole role, OsnTester.OsnProxy.OSNGroup remoteG, OsnTester.OsnProxy.GroupRole remoteRole, string remoteIP) {
            return base.Channel.ProxySetGroupsRole(curGroupId, role, remoteG, remoteRole, remoteIP);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySetGroupsRoleAsync(string curGroupId, OsnTester.OsnProxy.GroupRole role, OsnTester.OsnProxy.OSNGroup remoteG, OsnTester.OsnProxy.GroupRole remoteRole, string remoteIP) {
            return base.Channel.ProxySetGroupsRoleAsync(curGroupId, role, remoteG, remoteRole, remoteIP);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyUnsetGroupRole(string curGroupId, string remoteGroupId) {
            return base.Channel.ProxyUnsetGroupRole(curGroupId, remoteGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnsetGroupRoleAsync(string curGroupId, string remoteGroupId) {
            return base.Channel.ProxyUnsetGroupRoleAsync(curGroupId, remoteGroupId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyUpdateGroupState(string curGroupId, OsnTester.OsnProxy.SwitchState state) {
            return base.Channel.ProxyUpdateGroupState(curGroupId, state);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUpdateGroupStateAsync(string curGroupId, OsnTester.OsnProxy.SwitchState state) {
            return base.Channel.ProxyUpdateGroupStateAsync(curGroupId, state);
        }
        
        public OsnTester.OsnProxy.StoragePool[] ProxyGetPoolListByServerId(string serverId) {
            return base.Channel.ProxyGetPoolListByServerId(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool[]> ProxyGetPoolListByServerIdAsync(string serverId) {
            return base.Channel.ProxyGetPoolListByServerIdAsync(serverId);
        }
        
        public string ProxyGetPoolNameById(string poolId) {
            return base.Channel.ProxyGetPoolNameById(poolId);
        }
        
        public System.Threading.Tasks.Task<string> ProxyGetPoolNameByIdAsync(string poolId) {
            return base.Channel.ProxyGetPoolNameByIdAsync(poolId);
        }
        
        public OsnTester.OsnProxy.StoragePool ProxyGetPoolById(string serverId, string poolId) {
            return base.Channel.ProxyGetPoolById(serverId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool> ProxyGetPoolByIdAsync(string serverId, string poolId) {
            return base.Channel.ProxyGetPoolByIdAsync(serverId, poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreatePool(string serverId, string poolName, OsnTester.OsnProxy.PoolStyle category, OsnTester.OsnProxy.RedundanceLevel ftLevel, uint unitSize, bool ptFlag) {
            return base.Channel.ProxyCreatePool(serverId, poolName, category, ftLevel, unitSize, ptFlag);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreatePoolAsync(string serverId, string poolName, OsnTester.OsnProxy.PoolStyle category, OsnTester.OsnProxy.RedundanceLevel ftLevel, uint unitSize, bool ptFlag) {
            return base.Channel.ProxyCreatePoolAsync(serverId, poolName, category, ftLevel, unitSize, ptFlag);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckPoolName(string poolName) {
            return base.Channel.ProxyCheckPoolName(poolName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckPoolNameAsync(string poolName) {
            return base.Channel.ProxyCheckPoolNameAsync(poolName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyIsPoolMultiShared(string servGroupId, string poolId) {
            return base.Channel.ProxyIsPoolMultiShared(servGroupId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyIsPoolMultiSharedAsync(string servGroupId, string poolId) {
            return base.Channel.ProxyIsPoolMultiSharedAsync(servGroupId, poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeletePool(string serverId, string poolId) {
            return base.Channel.ProxyDeletePool(serverId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeletePoolAsync(string serverId, string poolId) {
            return base.Channel.ProxyDeletePoolAsync(serverId, poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyReloadPool(string serverId, string[] poolIdList, bool forceFlag) {
            return base.Channel.ProxyReloadPool(serverId, poolIdList, forceFlag);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyReloadPoolAsync(string serverId, string[] poolIdList, bool forceFlag) {
            return base.Channel.ProxyReloadPoolAsync(serverId, poolIdList, forceFlag);
        }
        
        public OsnTester.OsnProxy.StorageAttribute ProxyQueryPoolAttribute(string serverId, string poolId, bool bRefresh) {
            return base.Channel.ProxyQueryPoolAttribute(serverId, poolId, bRefresh);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageAttribute> ProxyQueryPoolAttributeAsync(string serverId, string poolId, bool bRefresh) {
            return base.Channel.ProxyQueryPoolAttributeAsync(serverId, poolId, bRefresh);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxySwitchStorageModeByPoolId(string servGroupId, string poolId) {
            return base.Channel.ProxySwitchStorageModeByPoolId(servGroupId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySwitchStorageModeByPoolIdAsync(string servGroupId, string poolId) {
            return base.Channel.ProxySwitchStorageModeByPoolIdAsync(servGroupId, poolId);
        }
        
        public int ProxyGetPoolCountByServerId(string serverId) {
            return base.Channel.ProxyGetPoolCountByServerId(serverId);
        }
        
        public System.Threading.Tasks.Task<int> ProxyGetPoolCountByServerIdAsync(string serverId) {
            return base.Channel.ProxyGetPoolCountByServerIdAsync(serverId);
        }
        
        public OsnTester.OsnProxy.StoragePool[] ProxyGetPoolListByServerIdEx(string serverId, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetPoolListByServerIdEx(serverId, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StoragePool[]> ProxyGetPoolListByServerIdExAsync(string serverId, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetPoolListByServerIdExAsync(serverId, readoffset, perpageNum);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRescanDiskDrive(string serverId) {
            return base.Channel.ProxyRescanDiskDrive(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRescanDiskDriveAsync(string serverId) {
            return base.Channel.ProxyRescanDiskDriveAsync(serverId);
        }
        
        public OsnTester.OsnProxy.DiskDrive[] ProxyGetAvailableDiskList(string serverId, bool tFlag) {
            return base.Channel.ProxyGetAvailableDiskList(serverId, tFlag);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.DiskDrive[]> ProxyGetAvailableDiskListAsync(string serverId, bool tFlag) {
            return base.Channel.ProxyGetAvailableDiskListAsync(serverId, tFlag);
        }
        
        public OsnTester.OsnProxy.PoolDisk[] ProxyGetDiskDriveList(string serverId) {
            return base.Channel.ProxyGetDiskDriveList(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.PoolDisk[]> ProxyGetDiskDriveListAsync(string serverId) {
            return base.Channel.ProxyGetDiskDriveListAsync(serverId);
        }
        
        public OsnTester.OsnProxy.PoolDisk[] ProxyGetPoolDiskList(string serverId, string poolId) {
            return base.Channel.ProxyGetPoolDiskList(serverId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.PoolDisk[]> ProxyGetPoolDiskListAsync(string serverId, string poolId) {
            return base.Channel.ProxyGetPoolDiskListAsync(serverId, poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyAddDiskToPool(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList) {
            return base.Channel.ProxyAddDiskToPool(serverId, poolId, diskList);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddDiskToPoolAsync(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList) {
            return base.Channel.ProxyAddDiskToPoolAsync(serverId, poolId, diskList);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRemoveDiskFromPool(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList) {
            return base.Channel.ProxyRemoveDiskFromPool(serverId, poolId, diskList);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveDiskFromPoolAsync(string serverId, string poolId, OsnTester.OsnProxy.DiskItem[] diskList) {
            return base.Channel.ProxyRemoveDiskFromPoolAsync(serverId, poolId, diskList);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateVolumeGroup(string groupId, string volumeGroupName, string[] volumeIds) {
            return base.Channel.ProxyCreateVolumeGroup(groupId, volumeGroupName, volumeIds);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateVolumeGroupAsync(string groupId, string volumeGroupName, string[] volumeIds) {
            return base.Channel.ProxyCreateVolumeGroupAsync(groupId, volumeGroupName, volumeIds);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteVolumeGroup(string groupId, string volumeGroupId, bool removeVolumes) {
            return base.Channel.ProxyDeleteVolumeGroup(groupId, volumeGroupId, removeVolumes);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteVolumeGroupAsync(string groupId, string volumeGroupId, bool removeVolumes) {
            return base.Channel.ProxyDeleteVolumeGroupAsync(groupId, volumeGroupId, removeVolumes);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyAddVolumesToGroup(string groupId, string volumeGroupId, string[] volumeIds) {
            return base.Channel.ProxyAddVolumesToGroup(groupId, volumeGroupId, volumeIds);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddVolumesToGroupAsync(string groupId, string volumeGroupId, string[] volumeIds) {
            return base.Channel.ProxyAddVolumesToGroupAsync(groupId, volumeGroupId, volumeIds);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRemoveVolumesFromGroup(string groupId, string volumeGroupId, string[] volumeIds) {
            return base.Channel.ProxyRemoveVolumesFromGroup(groupId, volumeGroupId, volumeIds);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveVolumesFromGroupAsync(string groupId, string volumeGroupId, string[] volumeIds) {
            return base.Channel.ProxyRemoveVolumesFromGroupAsync(groupId, volumeGroupId, volumeIds);
        }
        
        public OsnTester.OsnProxy.VolumeGroup ProxyGetVolumeGroup(string groupId, string volumeGroupId) {
            return base.Channel.ProxyGetVolumeGroup(groupId, volumeGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.VolumeGroup> ProxyGetVolumeGroupAsync(string groupId, string volumeGroupId) {
            return base.Channel.ProxyGetVolumeGroupAsync(groupId, volumeGroupId);
        }
        
        public OsnTester.OsnProxy.VolumeGroup[] ProxyGetVolumeGroups(string groupId) {
            return base.Channel.ProxyGetVolumeGroups(groupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.VolumeGroup[]> ProxyGetVolumeGroupsAsync(string groupId) {
            return base.Channel.ProxyGetVolumeGroupsAsync(groupId);
        }
        
        public bool ProxyCheckVolumeGroupName(string volumeGroupName) {
            return base.Channel.ProxyCheckVolumeGroupName(volumeGroupName);
        }
        
        public System.Threading.Tasks.Task<bool> ProxyCheckVolumeGroupNameAsync(string volumeGroupName) {
            return base.Channel.ProxyCheckVolumeGroupNameAsync(volumeGroupName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateGroupCDPSnap(string groupId, string volumeGroupId, bool isVolume) {
            return base.Channel.ProxyCreateGroupCDPSnap(groupId, volumeGroupId, isVolume);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateGroupCDPSnapAsync(string groupId, string volumeGroupId, bool isVolume) {
            return base.Channel.ProxyCreateGroupCDPSnapAsync(groupId, volumeGroupId, isVolume);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteGroupCDPSnap(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyDeleteGroupCDPSnap(groupId, volumeGroupId, label, isVolume);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteGroupCDPSnapAsync(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyDeleteGroupCDPSnapAsync(groupId, volumeGroupId, label, isVolume);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRestoreGroupCDPSnap(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyRestoreGroupCDPSnap(groupId, volumeGroupId, label, isVolume);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRestoreGroupCDPSnapAsync(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyRestoreGroupCDPSnapAsync(groupId, volumeGroupId, label, isVolume);
        }
        
        public OsnTester.OsnProxy.StringsPair[] ProxyGetGroupCDPMirroPair(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyGetGroupCDPMirroPair(groupId, volumeGroupId, label, isVolume);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StringsPair[]> ProxyGetGroupCDPMirroPairAsync(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyGetGroupCDPMirroPairAsync(groupId, volumeGroupId, label, isVolume);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyUnrestoreGroupCDPSnap(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyUnrestoreGroupCDPSnap(groupId, volumeGroupId, label, isVolume);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnrestoreGroupCDPSnapAsync(string groupId, string volumeGroupId, string label, bool isVolume) {
            return base.Channel.ProxyUnrestoreGroupCDPSnapAsync(groupId, volumeGroupId, label, isVolume);
        }
        
        public string[] ProxyGetAvailableGroupCDPSnaps(string groupId, string volumeGroupId, bool isVolume) {
            return base.Channel.ProxyGetAvailableGroupCDPSnaps(groupId, volumeGroupId, isVolume);
        }
        
        public System.Threading.Tasks.Task<string[]> ProxyGetAvailableGroupCDPSnapsAsync(string groupId, string volumeGroupId, bool isVolume) {
            return base.Channel.ProxyGetAvailableGroupCDPSnapsAsync(groupId, volumeGroupId, isVolume);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxyGetVolumeListByPoolId(string serverId, string poolId) {
            return base.Channel.ProxyGetVolumeListByPoolId(serverId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetVolumeListByPoolIdAsync(string serverId, string poolId) {
            return base.Channel.ProxyGetVolumeListByPoolIdAsync(serverId, poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRefreshVolumeListByPoolId(string serverId, string poolId) {
            return base.Channel.ProxyRefreshVolumeListByPoolId(serverId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRefreshVolumeListByPoolIdAsync(string serverId, string poolId) {
            return base.Channel.ProxyRefreshVolumeListByPoolIdAsync(serverId, poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateVolume(string serverId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile) {
            return base.Channel.ProxyCreateVolume(serverId, poolId, volName, volSize, profile);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateVolumeAsync(string serverId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile) {
            return base.Channel.ProxyCreateVolumeAsync(serverId, poolId, volName, volSize, profile);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyBatchCreateVolume(string serverId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile) {
            return base.Channel.ProxyBatchCreateVolume(serverId, poolId, nameList, volSize, profile);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyBatchCreateVolumeAsync(string serverId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile) {
            return base.Channel.ProxyBatchCreateVolumeAsync(serverId, poolId, nameList, volSize, profile);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateDualPortVolume(string servGroupId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys) {
            return base.Channel.ProxyCreateDualPortVolume(servGroupId, poolId, volName, volSize, profile, dpEntrys);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateDualPortVolumeAsync(string servGroupId, string poolId, string volName, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys) {
            return base.Channel.ProxyCreateDualPortVolumeAsync(servGroupId, poolId, volName, volSize, profile, dpEntrys);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyBatchCreateDualPortVolume(string servGroupId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys) {
            return base.Channel.ProxyBatchCreateDualPortVolume(servGroupId, poolId, nameList, volSize, profile, dpEntrys);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyBatchCreateDualPortVolumeAsync(string servGroupId, string poolId, string[] nameList, ulong volSize, OsnTester.OsnProxy.VolumeProfile profile, OsnTester.OsnProxy.MappingEntry[] dpEntrys) {
            return base.Channel.ProxyBatchCreateDualPortVolumeAsync(servGroupId, poolId, nameList, volSize, profile, dpEntrys);
        }
        
        public OsnTester.OsnProxy.StorageAttribute ProxyQueryVolumeAttribute(string serverId, string volumeId, bool bRefresh) {
            return base.Channel.ProxyQueryVolumeAttribute(serverId, volumeId, bRefresh);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageAttribute> ProxyQueryVolumeAttributeAsync(string serverId, string volumeId, bool bRefresh) {
            return base.Channel.ProxyQueryVolumeAttributeAsync(serverId, volumeId, bRefresh);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxySwitchStorageModeByVolumeId(string servGroupId, string volumeId) {
            return base.Channel.ProxySwitchStorageModeByVolumeId(servGroupId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxySwitchStorageModeByVolumeIdAsync(string servGroupId, string volumeId) {
            return base.Channel.ProxySwitchStorageModeByVolumeIdAsync(servGroupId, volumeId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckVolumeName(string[] volNameList) {
            return base.Channel.ProxyCheckVolumeName(volNameList);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckVolumeNameAsync(string[] volNameList) {
            return base.Channel.ProxyCheckVolumeNameAsync(volNameList);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteVolume(string servGroupId, string volumeId) {
            return base.Channel.ProxyDeleteVolume(servGroupId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteVolumeAsync(string servGroupId, string volumeId) {
            return base.Channel.ProxyDeleteVolumeAsync(servGroupId, volumeId);
        }
        
        public string ProxyGetVolumeNameById(string volumeId) {
            return base.Channel.ProxyGetVolumeNameById(volumeId);
        }
        
        public System.Threading.Tasks.Task<string> ProxyGetVolumeNameByIdAsync(string volumeId) {
            return base.Channel.ProxyGetVolumeNameByIdAsync(volumeId);
        }
        
        public OsnTester.OsnProxy.StorageVolume ProxyQueryVolumeById(string volumeId) {
            return base.Channel.ProxyQueryVolumeById(volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume> ProxyQueryVolumeByIdAsync(string volumeId) {
            return base.Channel.ProxyQueryVolumeByIdAsync(volumeId);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxySearchCDPSettingVolume(string servGroupId, int offset, int pagesize, string volumeName) {
            return base.Channel.ProxySearchCDPSettingVolume(servGroupId, offset, pagesize, volumeName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxySearchCDPSettingVolumeAsync(string servGroupId, int offset, int pagesize, string volumeName) {
            return base.Channel.ProxySearchCDPSettingVolumeAsync(servGroupId, offset, pagesize, volumeName);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxyGetCDPPageVolumeListUnderGroup(string servGroupId, int offset, int pagesize) {
            return base.Channel.ProxyGetCDPPageVolumeListUnderGroup(servGroupId, offset, pagesize);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetCDPPageVolumeListUnderGroupAsync(string servGroupId, int offset, int pagesize) {
            return base.Channel.ProxyGetCDPPageVolumeListUnderGroupAsync(servGroupId, offset, pagesize);
        }
        
        public OsnTester.OsnProxy.ASTPolicy[] ProxyGetASTPolicies() {
            return base.Channel.ProxyGetASTPolicies();
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPolicy[]> ProxyGetASTPoliciesAsync() {
            return base.Channel.ProxyGetASTPoliciesAsync();
        }
        
        public OsnTester.OsnProxy.ASTPolicy ProxyGetASTPolicy(string poolId) {
            return base.Channel.ProxyGetASTPolicy(poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPolicy> ProxyGetASTPolicyAsync(string poolId) {
            return base.Channel.ProxyGetASTPolicyAsync(poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateASTPool(string serverId, string poolName, uint unitSize, string policyName) {
            return base.Channel.ProxyCreateASTPool(serverId, poolName, unitSize, policyName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateASTPoolAsync(string serverId, string poolName, uint unitSize, string policyName) {
            return base.Channel.ProxyCreateASTPoolAsync(serverId, poolName, unitSize, policyName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteASTPool(string serverId, string poolId) {
            return base.Channel.ProxyDeleteASTPool(serverId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteASTPoolAsync(string serverId, string poolId) {
            return base.Channel.ProxyDeleteASTPoolAsync(serverId, poolId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyModifyASTPolicy(string poolId, string policyName) {
            return base.Channel.ProxyModifyASTPolicy(poolId, policyName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyModifyASTPolicyAsync(string poolId, string policyName) {
            return base.Channel.ProxyModifyASTPolicyAsync(poolId, policyName);
        }
        
        public OsnTester.OsnProxy.ASTPattern ProxyGetASTPattern(string modeName) {
            return base.Channel.ProxyGetASTPattern(modeName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPattern> ProxyGetASTPatternAsync(string modeName) {
            return base.Channel.ProxyGetASTPatternAsync(modeName);
        }
        
        public OsnTester.OsnProxy.ASTPattern[] ProxyGetASTPatterns() {
            return base.Channel.ProxyGetASTPatterns();
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ASTPattern[]> ProxyGetASTPatternsAsync() {
            return base.Channel.ProxyGetASTPatternsAsync();
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCustomizeASTPattern(OsnTester.OsnProxy.ASTPattern pattern) {
            return base.Channel.ProxyCustomizeASTPattern(pattern);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCustomizeASTPatternAsync(OsnTester.OsnProxy.ASTPattern pattern) {
            return base.Channel.ProxyCustomizeASTPatternAsync(pattern);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteASTPattern(string policyName) {
            return base.Channel.ProxyDeleteASTPattern(policyName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteASTPatternAsync(string policyName) {
            return base.Channel.ProxyDeleteASTPatternAsync(policyName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckModeName(string modeName) {
            return base.Channel.ProxyCheckModeName(modeName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckModeNameAsync(string modeName) {
            return base.Channel.ProxyCheckModeNameAsync(modeName);
        }
        
        public OsnTester.OsnProxy.DeviceDisplay ProxyGetPoolDisplay(string serverId, string poolId) {
            return base.Channel.ProxyGetPoolDisplay(serverId, poolId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.DeviceDisplay> ProxyGetPoolDisplayAsync(string serverId, string poolId) {
            return base.Channel.ProxyGetPoolDisplayAsync(serverId, poolId);
        }
        
        public OsnTester.OsnProxy.DeviceDisplay ProxyGetVolumeDisplay(string serverId, string volumeId) {
            return base.Channel.ProxyGetVolumeDisplay(serverId, volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.DeviceDisplay> ProxyGetVolumeDisplayAsync(string serverId, string volumeId) {
            return base.Channel.ProxyGetVolumeDisplayAsync(serverId, volumeId);
        }
        
        public OsnTester.OsnProxy.DiskDisplay[] ProxyGetPoolDiskDisplay(string serverId, string poolId, OsnTester.OsnProxy.DiskAnchor tier) {
            return base.Channel.ProxyGetPoolDiskDisplay(serverId, poolId, tier);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.DiskDisplay[]> ProxyGetPoolDiskDisplayAsync(string serverId, string poolId, OsnTester.OsnProxy.DiskAnchor tier) {
            return base.Channel.ProxyGetPoolDiskDisplayAsync(serverId, poolId, tier);
        }
        
        public OsnTester.OsnProxy.DiskDisplay[] ProxyGetVolumeDiskDisplay(string serverId, string volumeId, OsnTester.OsnProxy.DiskAnchor tier) {
            return base.Channel.ProxyGetVolumeDiskDisplay(serverId, volumeId, tier);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.DiskDisplay[]> ProxyGetVolumeDiskDisplayAsync(string serverId, string volumeId, OsnTester.OsnProxy.DiskAnchor tier) {
            return base.Channel.ProxyGetVolumeDiskDisplayAsync(serverId, volumeId, tier);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyManualMigrate(string volumeId, OsnTester.OsnProxy.DiskAnchor targetTier) {
            return base.Channel.ProxyManualMigrate(volumeId, targetTier);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyManualMigrateAsync(string volumeId, OsnTester.OsnProxy.DiskAnchor targetTier) {
            return base.Channel.ProxyManualMigrateAsync(volumeId, targetTier);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxyGetOptionalVolumeListUnderGroup(string servGroupId, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxyGetOptionalVolumeListUnderGroup(servGroupId, filter);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetOptionalVolumeListUnderGroupAsync(string servGroupId, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxyGetOptionalVolumeListUnderGroupAsync(servGroupId, filter);
        }
        
        public int ProxyGetOptionalVolumeCountUnderGroup(string servGroupId, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxyGetOptionalVolumeCountUnderGroup(servGroupId, filter);
        }
        
        public System.Threading.Tasks.Task<int> ProxyGetOptionalVolumeCountUnderGroupAsync(string servGroupId, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxyGetOptionalVolumeCountUnderGroupAsync(servGroupId, filter);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxyGetOptionalVolumeListUnderGroupEx(string servGroupId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetOptionalVolumeListUnderGroupEx(servGroupId, filter, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetOptionalVolumeListUnderGroupExAsync(string servGroupId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetOptionalVolumeListUnderGroupExAsync(servGroupId, filter, readoffset, perpageNum);
        }
        
        public int ProxyGetOptionalVolumeCountByPoolId(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxyGetOptionalVolumeCountByPoolId(serverId, poolId, filter);
        }
        
        public System.Threading.Tasks.Task<int> ProxyGetOptionalVolumeCountByPoolIdAsync(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter) {
            return base.Channel.ProxyGetOptionalVolumeCountByPoolIdAsync(serverId, poolId, filter);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxyGetOptionalVolumeListByPoolId(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetOptionalVolumeListByPoolId(serverId, poolId, filter, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetOptionalVolumeListByPoolIdAsync(string serverId, string poolId, OsnTester.OsnProxy.OSNFilter filter, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetOptionalVolumeListByPoolIdAsync(serverId, poolId, filter, readoffset, perpageNum);
        }
        
        public OsnTester.OsnProxy.TargetChannel[] ProxyGetTargetChannelList(string serverId) {
            return base.Channel.ProxyGetTargetChannelList(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.TargetChannel[]> ProxyGetTargetChannelListAsync(string serverId) {
            return base.Channel.ProxyGetTargetChannelListAsync(serverId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyReloadTargetChannelList(string serverId) {
            return base.Channel.ProxyReloadTargetChannelList(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyReloadTargetChannelListAsync(string serverId) {
            return base.Channel.ProxyReloadTargetChannelListAsync(serverId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyReloadServerChannelList(string serverId) {
            return base.Channel.ProxyReloadServerChannelList(serverId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyReloadServerChannelListAsync(string serverId) {
            return base.Channel.ProxyReloadServerChannelListAsync(serverId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyMakeDefaultServerChannel(OsnTester.OsnProxy.ChannelPair[] cpArray) {
            return base.Channel.ProxyMakeDefaultServerChannel(cpArray);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyMakeDefaultServerChannelAsync(OsnTester.OsnProxy.ChannelPair[] cpArray) {
            return base.Channel.ProxyMakeDefaultServerChannelAsync(cpArray);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRemoveTargetChannel(string serverId, string wwn) {
            return base.Channel.ProxyRemoveTargetChannel(serverId, wwn);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveTargetChannelAsync(string serverId, string wwn) {
            return base.Channel.ProxyRemoveTargetChannelAsync(serverId, wwn);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckTargetChannelAlias(string newAlias) {
            return base.Channel.ProxyCheckTargetChannelAlias(newAlias);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckTargetChannelAliasAsync(string newAlias) {
            return base.Channel.ProxyCheckTargetChannelAliasAsync(newAlias);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRenameTargetChannelAlias(string serverId, string wwn, string newAlias) {
            return base.Channel.ProxyRenameTargetChannelAlias(serverId, wwn, newAlias);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameTargetChannelAliasAsync(string serverId, string wwn, string newAlias) {
            return base.Channel.ProxyRenameTargetChannelAliasAsync(serverId, wwn, newAlias);
        }
        
        public OsnTester.OsnProxy.StorageClient[] ProxyGetStorageClientListByGroupId(string servGroupId) {
            return base.Channel.ProxyGetStorageClientListByGroupId(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageClient[]> ProxyGetStorageClientListByGroupIdAsync(string servGroupId) {
            return base.Channel.ProxyGetStorageClientListByGroupIdAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCreateStorageClient(string servGroupId, string clientName, string clientIp, OsnTester.OsnProxy.OSType system) {
            return base.Channel.ProxyCreateStorageClient(servGroupId, clientName, clientIp, system);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCreateStorageClientAsync(string servGroupId, string clientName, string clientIp, OsnTester.OsnProxy.OSType system) {
            return base.Channel.ProxyCreateStorageClientAsync(servGroupId, clientName, clientIp, system);
        }
        
        public string ProxyGetStorageClientNameById(string clientId) {
            return base.Channel.ProxyGetStorageClientNameById(clientId);
        }
        
        public System.Threading.Tasks.Task<string> ProxyGetStorageClientNameByIdAsync(string clientId) {
            return base.Channel.ProxyGetStorageClientNameByIdAsync(clientId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckStorageClientName(string clientName) {
            return base.Channel.ProxyCheckStorageClientName(clientName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckStorageClientNameAsync(string clientName) {
            return base.Channel.ProxyCheckStorageClientNameAsync(clientName);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckStorageClientAddress(string servGroupId, string clientIp) {
            return base.Channel.ProxyCheckStorageClientAddress(servGroupId, clientIp);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckStorageClientAddressAsync(string servGroupId, string clientIp) {
            return base.Channel.ProxyCheckStorageClientAddressAsync(servGroupId, clientIp);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyDeleteStorageClient(string servGroupId, string clientId, bool bForceFlag) {
            return base.Channel.ProxyDeleteStorageClient(servGroupId, clientId, bForceFlag);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyDeleteStorageClientAsync(string servGroupId, string clientId, bool bForceFlag) {
            return base.Channel.ProxyDeleteStorageClientAsync(servGroupId, clientId, bForceFlag);
        }
        
        public int ProxyGetStorageClientCountByGroupId(string servGroupId) {
            return base.Channel.ProxyGetStorageClientCountByGroupId(servGroupId);
        }
        
        public System.Threading.Tasks.Task<int> ProxyGetStorageClientCountByGroupIdAsync(string servGroupId) {
            return base.Channel.ProxyGetStorageClientCountByGroupIdAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.StorageClient[] ProxyGetStorageClientListByGroupIdEx(string servGroupId, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetStorageClientListByGroupIdEx(servGroupId, readoffset, perpageNum);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageClient[]> ProxyGetStorageClientListByGroupIdExAsync(string servGroupId, int readoffset, int perpageNum) {
            return base.Channel.ProxyGetStorageClientListByGroupIdExAsync(servGroupId, readoffset, perpageNum);
        }
        
        public OsnTester.OsnProxy.InitiatorChannel[] ProxyGetOptionalInitiatorPortList(string servGroupId) {
            return base.Channel.ProxyGetOptionalInitiatorPortList(servGroupId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.InitiatorChannel[]> ProxyGetOptionalInitiatorPortListAsync(string servGroupId) {
            return base.Channel.ProxyGetOptionalInitiatorPortListAsync(servGroupId);
        }
        
        public OsnTester.OsnProxy.InitiatorChannel[] ProxyGetInitiatorChannelListUnderTarget(string serverId, string wwn) {
            return base.Channel.ProxyGetInitiatorChannelListUnderTarget(serverId, wwn);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.InitiatorChannel[]> ProxyGetInitiatorChannelListUnderTargetAsync(string serverId, string wwn) {
            return base.Channel.ProxyGetInitiatorChannelListUnderTargetAsync(serverId, wwn);
        }
        
        public OsnTester.OsnProxy.InitiatorChannel[] ProxyGetInitiatorChannelListUnderClient(string clientId) {
            return base.Channel.ProxyGetInitiatorChannelListUnderClient(clientId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.InitiatorChannel[]> ProxyGetInitiatorChannelListUnderClientAsync(string clientId) {
            return base.Channel.ProxyGetInitiatorChannelListUnderClientAsync(clientId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyAddInitiatorChannelToClient(string clientId, string alias, string wwn, string ipAddr, OsnTester.OsnProxy.PortType type) {
            return base.Channel.ProxyAddInitiatorChannelToClient(clientId, alias, wwn, ipAddr, type);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAddInitiatorChannelToClientAsync(string clientId, string alias, string wwn, string ipAddr, OsnTester.OsnProxy.PortType type) {
            return base.Channel.ProxyAddInitiatorChannelToClientAsync(clientId, alias, wwn, ipAddr, type);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyBatchAddInitiatorChannelToClient(string clientId, OsnTester.OsnProxy.ChannelBasis[] channelList) {
            return base.Channel.ProxyBatchAddInitiatorChannelToClient(clientId, channelList);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyBatchAddInitiatorChannelToClientAsync(string clientId, OsnTester.OsnProxy.ChannelBasis[] channelList) {
            return base.Channel.ProxyBatchAddInitiatorChannelToClientAsync(clientId, channelList);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyCheckInitiatorChannelAlias(string newAlias) {
            return base.Channel.ProxyCheckInitiatorChannelAlias(newAlias);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyCheckInitiatorChannelAliasAsync(string newAlias) {
            return base.Channel.ProxyCheckInitiatorChannelAliasAsync(newAlias);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRenameInitiatorChannelAlias(string clientId, string wwn, string newAlias) {
            return base.Channel.ProxyRenameInitiatorChannelAlias(clientId, wwn, newAlias);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRenameInitiatorChannelAliasAsync(string clientId, string wwn, string newAlias) {
            return base.Channel.ProxyRenameInitiatorChannelAliasAsync(clientId, wwn, newAlias);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyRemoveInitiatorChannelFromClient(string clientId, string wwn) {
            return base.Channel.ProxyRemoveInitiatorChannelFromClient(clientId, wwn);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyRemoveInitiatorChannelFromClientAsync(string clientId, string wwn) {
            return base.Channel.ProxyRemoveInitiatorChannelFromClientAsync(clientId, wwn);
        }
        
        public OsnTester.OsnProxy.ChannelPair[] ProxyGetChannelPairListByInitiatorChannel(string servGroupId, string iChannelWWN) {
            return base.Channel.ProxyGetChannelPairListByInitiatorChannel(servGroupId, iChannelWWN);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.ChannelPair[]> ProxyGetChannelPairListByInitiatorChannelAsync(string servGroupId, string iChannelWWN) {
            return base.Channel.ProxyGetChannelPairListByInitiatorChannelAsync(servGroupId, iChannelWWN);
        }
        
        public uint ProxyQueryLinkedChannelCountByInitiatorChannel(string servGroupId, string iChannelWWN) {
            return base.Channel.ProxyQueryLinkedChannelCountByInitiatorChannel(servGroupId, iChannelWWN);
        }
        
        public System.Threading.Tasks.Task<uint> ProxyQueryLinkedChannelCountByInitiatorChannelAsync(string servGroupId, string iChannelWWN) {
            return base.Channel.ProxyQueryLinkedChannelCountByInitiatorChannelAsync(servGroupId, iChannelWWN);
        }
        
        public OsnTester.OsnProxy.StorageMapping[] ProxyGetStorageMappingList(string volumeId) {
            return base.Channel.ProxyGetStorageMappingList(volumeId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageMapping[]> ProxyGetStorageMappingListAsync(string volumeId) {
            return base.Channel.ProxyGetStorageMappingListAsync(volumeId);
        }
        
        public OsnTester.OsnProxy.StorageMapping[] ProxySearchStorageMappingList(string volumeId, string key, string clientName) {
            return base.Channel.ProxySearchStorageMappingList(volumeId, key, clientName);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageMapping[]> ProxySearchStorageMappingListAsync(string volumeId, string key, string clientName) {
            return base.Channel.ProxySearchStorageMappingListAsync(volumeId, key, clientName);
        }
        
        public OsnTester.OsnProxy.StorageMapping[] ProxyGetStorageMappingListUnderClient(string clientId) {
            return base.Channel.ProxyGetStorageMappingListUnderClient(clientId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageMapping[]> ProxyGetStorageMappingListUnderClientAsync(string clientId) {
            return base.Channel.ProxyGetStorageMappingListUnderClientAsync(clientId);
        }
        
        public OsnTester.OsnProxy.StorageVolume[] ProxyGetAssignedVolumeListUnderClient(string clientId) {
            return base.Channel.ProxyGetAssignedVolumeListUnderClient(clientId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.StorageVolume[]> ProxyGetAssignedVolumeListUnderClientAsync(string clientId) {
            return base.Channel.ProxyGetAssignedVolumeListUnderClientAsync(clientId);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyAssignStorageVolumeByChannel(OsnTester.OsnProxy.MappingEntry mapEntry) {
            return base.Channel.ProxyAssignStorageVolumeByChannel(mapEntry);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAssignStorageVolumeByChannelAsync(OsnTester.OsnProxy.MappingEntry mapEntry) {
            return base.Channel.ProxyAssignStorageVolumeByChannelAsync(mapEntry);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyAssignStorageVolumeToClient(string volumeId, string clientId, OsnTester.OsnProxy.MapAuth auth, OsnTester.OsnProxy.MapKind mapKind) {
            return base.Channel.ProxyAssignStorageVolumeToClient(volumeId, clientId, auth, mapKind);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyAssignStorageVolumeToClientAsync(string volumeId, string clientId, OsnTester.OsnProxy.MapAuth auth, OsnTester.OsnProxy.MapKind mapKind) {
            return base.Channel.ProxyAssignStorageVolumeToClientAsync(volumeId, clientId, auth, mapKind);
        }
        
        public OsnTester.OsnProxy.OSNStatus ProxyUnAssignStorageVolumeToClient(string volumeId, string clientId) {
            return base.Channel.ProxyUnAssignStorageVolumeToClient(volumeId, clientId);
        }
        
        public System.Threading.Tasks.Task<OsnTester.OsnProxy.OSNStatus> ProxyUnAssignStorageVolumeToClientAsync(string volumeId, string clientId) {
            return base.Channel.ProxyUnAssignStorageVolumeToClientAsync(volumeId, clientId);
        }
    }
}
